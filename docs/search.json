[{"path":"https://wuwei77lx.github.io/SCEGHiC/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 SCEGHiC authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"load-the-required-libraries","dir":"Articles","previous_headings":"","what":"Load the required libraries","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"","code":"library(SCEGHiC) library(Seurat) library(Signac) library(GenomicRanges) library(GenomeInfoDb) library(EnsDb.Hsapiens.v86) library(ggplot2) library(dplyr)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"set-up-a-seurat-object","dir":"Articles","previous_headings":"","what":"Set up a Seurat object","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"facilitate easy exploration, covid_19_multiomic.rds also available 10.5281/zenodo.14849886. , sample 55650-0067 used example.  17 samples processed following steps outlined . can merge peaks datasets create common peak set.","code":"# load the ATAC data fragpath <- \"hg38/GSM5285743_55650-0067_fragments.tsv.gz\" total_counts <- CountFragments(fragpath) cutoff <- 1000 # Change this number depending on your dataset! barcodes <- total_counts[total_counts$frequency_count > cutoff, ]$CB # get gene annotations for hg38 annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86) seqlevels(annotation) <- paste0(\"chr\", seqlevels(annotation))  # Create a fragment object frags <- CreateFragmentObject(path = fragpath, cells = barcodes)  # call peaks on the dataset peaks <- CallPeaks(frags) peaks <- keepStandardChromosomes(peaks, pruning.mode = \"coarse\") peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_hg38_unified, invert = TRUE)  # Quantify fragments in each peak counts <- FeatureMatrix(fragments = frags, features = peaks, cells = barcodes)  # create ATAC assay and add it to the object chrom_assay <- CreateChromatinAssay(   counts = counts,   sep = c(\":\", \"-\"),   fragments = frags,   annotation = annotation,   min.cells = 10,   min.features = 200 )  # create a Seurat object containing the ATAC data covid_19 <- CreateSeuratObject(   counts = chrom_assay,   assay = \"ATAC\" ) covid_19 ## An object of class Seurat  ## 113561 features across 49691 samples within 1 assay  ## Active assay: ATAC (113561 features, 0 variable features) ##  2 layers present: counts, data # Quality control DefaultAssay(covid_19) <- \"ATAC\" covid_19 <- NucleosomeSignal(covid_19) covid_19 <- TSSEnrichment(covid_19) covid_19$log10_fragments <- log10(covid_19$nCount_ATAC + 1)  VlnPlot(   object = covid_19,   features = c(\"log10_fragments\", \"TSS.enrichment\", \"nucleosome_signal\"),   ncol = 3,   pt.size = 0 ) # filter out low quality cells ATAC_067 <- subset(   x = covid_19,   subset =     log10_fragments < 3.7 &       log10_fragments > 3 &       nucleosome_signal < 2 &       TSS.enrichment < 8 ) ATAC_067 ## An object of class Seurat  ## 113561 features across 3046 samples within 1 assay  ## Active assay: ATAC (113561 features, 0 variable features) ##  2 layers present: counts, data combined.peaks <- UnifyPeaks(object.list = list(ATAC_055, ATAC_057, ATAC_132D0, ATAC_052, ATAC_555_1, ATAC_555_2, ATAC_556, ATAC_557, ATAC_558, ATAC_559, ATAC_564A, ATAC_564B, ATAC_66D0, ATAC_66D7, ATAC_067, ATAC_083, ATAC_086), mode = \"reduce\")  # Save data saveRDS(combined.peaks, file = \"hg38/combined.peaks.rds\") # load common peak set combined.peaks<-readRDS(\"hg38/combined.peaks.rds\") peakwidths <- width(combined.peaks) combined.peaks <- combined.peaks[peakwidths < 10000 & peakwidths > 20]  # Quantify peaks in each dataset ATAC_067.counts <- FeatureMatrix(   fragments = Fragments(ATAC_067),   features = combined.peaks,   sep = c(\":\", \"-\"),   cells = colnames(ATAC_067) )  frags.ATAC_067 <- CreateFragmentObject(   path = fragpath,   cells = colnames(ATAC_067) )  ATAC_067[[\"raw\"]] <- ATAC_067@assays[[\"ATAC\"]] ATAC_067[[\"ATAC\"]] <- CreateChromatinAssay(counts = ATAC_067.counts, sep = c(\":\", \"-\"), fragments = frags.ATAC_067, annotation = annotation)  # add information ATAC_067$record_id <- \"55650-0067\" ATAC_067$MAX_SEVERITY_SCORE <- 2  ATAC_067 ## An object of class Seurat  ## 308985 features across 3046 samples within 2 assays  ## Active assay: ATAC (195424 features, 0 variable features) ##  2 layers present: counts, data ##  1 other assay present: raw"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"annotating-cell-types","dir":"Articles","previous_headings":"Set up a Seurat object","what":"Annotating cell types","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"public multiomic dataset 10x Genomics healthy PBMCswas used intermediate cell type calls.’ll use PBMC reference dataset Hao et al. (2020) annotate multiomic dataset.scATAC sample projected linear dimensionality reduction multiomic dataset. 17 samples processed following steps outlined . can merge peaks datasets create common peak set.","code":"# Load the required libraries library(Seurat) library(Signac) library(GenomicRanges) library(GenomeInfoDb) library(EnsDb.Hsapiens.v75) library(EnsDb.Hsapiens.v86) library(hdf5r)  # load the RNA and ATAC data counts <- Read10X_h5(\"pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5\") fragpath <- \"pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz\"  # get gene annotations for hg38 annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86) seqlevels(annotation) <- paste0(\"chr\", seqlevels(annotation))  # create a Seurat object containing the RNA data reference <- CreateSeuratObject(   counts = counts$`Gene Expression`,   assay = \"RNA\" )  # create ATAC assay and add it to the object reference[[\"ATAC\"]] <- CreateChromatinAssay(   counts = counts$Peaks,   sep = c(\":\", \"-\"),   fragments = fragpath,   annotation = annotation1 ) # Quality control reference[[\"percent.mt\"]] <- PercentageFeatureSet(reference, pattern = \"^MT-\")  DefaultAssay(reference) <- \"ATAC\" reference <- NucleosomeSignal(reference) reference <- TSSEnrichment(reference)  # filter out low quality cells reference <- subset(   x = reference,   subset = nCount_ATAC < 100000 &     nCount_RNA < 15000 &     nCount_ATAC > 1000 &     nCount_RNA > 1000 &     nucleosome_signal < 2 &     TSS.enrichment > 1 &     percent.mt < 20 ) # Quality control # call peaks using MACS2 peaks <- CallPeaks(reference)  # remove peaks on nonstandard chromosomes and in genomic blacklist regions peaks <- keepStandardChromosomes(peaks, pruning.mode = \"coarse\") peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_hg38_unified, invert = TRUE)  # quantify counts in each peak macs2_counts <- FeatureMatrix(   fragments = frags,   features = peaks,   cells = colnames(reference) )  # create a new assay using the MACS2 peak set and add it to the Seurat object reference[[\"peaks\"]] <- CreateChromatinAssay(   counts = macs2_counts,   fragments = fragpath,   annotation = annotation )  # RNA analysis DefaultAssay(reference) <- \"RNA\" reference <- SCTransform(reference) reference <- RunPCA(reference)  # ATAC analysis DefaultAssay(reference) <- \"peaks\" DefaultAssay(reference) <- \"ATAC\" reference <- FindTopFeatures(reference, min.cutoff = 5) reference <- RunTFIDF(reference) reference <- RunSVD(reference) # Annotating cell types and Intergration analysis  library(SeuratDisk)  # load PBMC reference reference <- LoadH5Seurat(\"pbmc_multimodal.h5seurat\", assays = list(\"SCT\" = \"counts\"), reductions = \"spca\") reference <- UpdateSeuratObject(reference)  DefaultAssay(pbmc) <- \"SCT\"  # find transfer anchors transfer_anchors <- FindTransferAnchors(   reference = pbmc.re,   query = reference,   normalization.method = \"SCT\",   reference.reduction = \"spca\",   recompute.residuals = FALSE,   dims = 1:50 ) predictions <- TransferData(   anchorset = transfer_anchors,   refdata = pbmc.re$celltype.l2,   weight.reduction = reference[[\"pca\"]],   dims = 1:50 )  reference <- AddMetaData(   object = reference,   metadata = predictions ) reference <- reference[, reference$prediction.score.max > 0.5]  # build a joint neighbor graph using both assays reference <- FindMultiModalNeighbors(   object = reference,   reduction.list = list(\"pca\", \"lsi\"),   dims.list = list(1:50, 2:40),   modality.weight.name = \"RNA.weight\",   verbose = TRUE )  # build a joint UMAP visualization reference <- RunUMAP(   object = reference,   nn.name = \"weighted.nn\",   assay = \"RNA\",   verbose = TRUE ) # Save data saveRDS(reference, file = \"hg38/reference.rds\")"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"annotating-cell-types-1","dir":"Articles","previous_headings":"Set up a Seurat object","what":"Annotating cell types","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"17 samples processed following steps outlined . can use Signac’s standard merge function Seurat merge objects.","code":"# load multiomic PBMC reference dataset reference<-readRDS(\"hg38/reference.rds\") annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86) seqlevels(annotation) <- paste0(\"chr\", seqlevels(annotation)) reference <- RunUMAP(reference, reduction = \"lsi\", dims = 2:30, return.model = TRUE)  # Quantify peaks in each dataset based on the reference dataset DefaultAssay(reference) <- \"ATAC\" counts <- FeatureMatrix(   fragments = Fragments(ATAC_067),   features = granges(reference),   cells = colnames(ATAC_067) ) ATAC_067[[\"peaks\"]] <- CreateChromatinAssay(   counts = counts,   fragments = Fragments(ATAC_067),   annotation = annotation )  # ATAC analysis DefaultAssay(ATAC_067) <- \"peaks\" ATAC_067 <- FindTopFeatures(ATAC_067, min.cutoff = 10) ATAC_067 <- RunTFIDF(ATAC_067) ATAC_067 <- RunSVD(ATAC_067) ATAC_067 <- RunUMAP(object = ATAC_067, reduction = \"lsi\", dims = 2:30)  # find transfer anchors transfer.anchors <- FindTransferAnchors(   reference = reference,   query = ATAC_067,   reference.reduction = \"lsi\",   reduction = \"lsiproject\",   dims = 2:30 )  # map query onto the reference dataset ATAC_067 <- MapQuery(   anchorset = transfer.anchors,   reference = reference,   query = ATAC_067,   refdata = reference$predicted.id,   reference.reduction = \"lsi\",   new.reduction.name = \"ref.lsi\",   reduction.model = \"umap\" )  DimPlot(ATAC_067, label = FALSE, group.by = \"predicted.id\", repel = TRUE, reduction = \"umap\", label.size = 4, pt.size = 1) # Rename celltype  ATAC_067$celltype <- recode(ATAC_067@meta.data[[\"predicted.id\"]],   \"B intermediate\" = \"B\", \"B memory\" = \"B\", \"B naive\" = \"B\", \"Plasmablast\" = \"PB\", \"B immature\" = \"B\", \"CD4 CTL\" = \"CD4 T\",   \"CD4 Naive\" = \"CD4 T\", \"CD4 TCM\" = \"CD4 T\", \"CD4 TEM\" = \"CD4 T\", \"CD8 Naive\" = \"CD8 T\", \"CD8 TCM\" = \"CD8 T\", \"CD8 TEM\" = \"CD8 T\", \"Proliferating\" = \"Proliferating\", \"MAIT\" = \"Misc T\",   \"gdT\" = \"Misc T\", \"Treg\" = \"Misc T\", \"dnT\" = \"Misc T\", \"NK\" = \"NK\", \"NK_CD56bright\" = \"NK\", \"NK_CD56\" = \"NK\", \"CD14 Mono\" = \"CD14 mono\", \"CD16 Mono\" = \"CD16 mono\", \"pDC\" = \"pDC\", \"cDC1\" = \"DC\", \"cDC2\" = \"DC\",   \"ASDC\" = \"DC\", \"Platelet\" = \"Platelet\", \"Eryth\" = \"Eryth\", \"HSPC\" = \"HSPC\" )  DimPlot(ATAC_067, label = FALSE, group.by = \"celltype\", repel = TRUE, reduction = \"umap\", label.size = 4, pt.size = 1) seurat_list <- list(   ATAC_055, ATAC_057, ATAC_132D0, ATAC_052, ATAC_555_1, ATAC_555_2, ATAC_556, ATAC_557,   ATAC_558, ATAC_559, ATAC_564A, ATAC_564B, ATAC_66D0, ATAC_66D7, ATAC_067, ATAC_083, ATAC_086 )  # merge all datasets covid_19 <- Reduce(function(x, y) {   merge(x, y, add.cell.ids = c(1, 2)) }, seurat_list)  # Save data saveRDS(covid_19, file = \"hg38/covid_19_merge.rds\")"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"atac-analysis","dir":"Articles","previous_headings":"Set up a Seurat object","what":"ATAC analysis","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"","code":"# load merge data covid_19<-readRDS(\"hg38/covid_19_merge.rds\") DefaultAssay(covid_19) <- \"ATAC\" covid_19 <- FindTopFeatures(covid_19, min.cutoff = 10) covid_19 <- RunTFIDF(covid_19) covid_19 <- RunSVD(covid_19)  # Remove batch effects library(harmony) covid_19 <- RunHarmony(covid_19,   group.by.vars = \"record_id\",   reduction.use = \"lsi\",   reduction.save = \"harmony\",   assay.use = \"ATAC\",   project.dim = FALSE )  covid_19 <- RunUMAP(object = covid_19, reduction = \"harmony\", dims = 2:30)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"annotating-cell-types-2","dir":"Articles","previous_headings":"Set up a Seurat object","what":"Annotating cell types","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"","code":"covid_19 <- FindNeighbors(object = covid_19, reduction = \"harmony\", dims = 2:30) covid_19 <- FindClusters(object = covid_19, verbose = FALSE, resolution = 8, algorithm = 3)  # assigning cell types and colors for visualization temp <- table(covid_19$predicted.id, covid_19$seurat_clusters) wnn.celltype <- rep(NA, length(levels(covid_19$seurat_clusters))) p <- DimPlot(covid_19,   reduction = \"umap\", group.by = \"predicted.id\",   label = TRUE, label.size = 2.5, repel = TRUE ) for (i in 1:length(wnn.celltype)) {   temp.i_1 <- temp[, colnames(temp) == as.character(i - 1)]   wnn.celltype[i] <- names(temp.i_1)[which.max(temp.i_1)] }  ## get the corresponding color for each cell type from Seurat pbuild <- ggplot2::ggplot_build(p) pdata <- pbuild$data[[1]] pdata <- cbind(covid_19$predicted.id, pdata) wnn.celltype.col <- rep(NA, length(wnn.celltype)) for (i in 1:length(wnn.celltype)) {   wnn.celltype.col[i] <- pdata$colour[min(which(pdata$`covid_19$predicted.id` == wnn.celltype[i]))] }  names(wnn.celltype) <- levels(covid_19) covid_19 <- RenameIdents(covid_19, wnn.celltype)  # Rename celltype covid_19$celltype1 <- recode(Idents(covid_19),   \"B intermediate\" = \"B\", \"B memory\" = \"B\", \"B naive\" = \"B\", \"Plasmablast\" = \"PB\", \"B immature\" = \"B\", \"CD4 CTL\" = \"CD4 T\",   \"CD4 Naive\" = \"CD4 T\", \"CD4 TCM\" = \"CD4 T\", \"CD4 TEM\" = \"CD4 T\", \"CD8 Naive\" = \"CD8 T\", \"CD8 TCM\" = \"CD8 T\", \"CD8 TEM\" = \"CD8 T\", \"Proliferating\" = \"Proliferating\", \"MAIT\" = \"Misc T\",   \"gdT\" = \"Misc T\", \"Treg\" = \"Misc T\", \"dnT\" = \"Misc T\", \"NK\" = \"NK\", \"NK_CD56bright\" = \"NK\", \"NK_CD56\" = \"NK\", \"CD14 Mono\" = \"CD14 mono\", \"CD16 Mono\" = \"CD16 mono\", \"pDC\" = \"pDC\", \"cDC1\" = \"DC\", \"cDC2\" = \"DC\",   \"ASDC\" = \"DC\", \"Platelet\" = \"Platelet\", \"Eryth\" = \"Eryth\", \"HSPC\" = \"HSPC\" ) class <- ifelse(covid_19@meta.data[[\"MAX_SEVERITY_SCORE\"]] > 4, \"severe\", \"mild\") class <- factor(class, levels = c(\"severe\", \"mild\")) covid_19$Status <- class  p1 <- DimPlot(covid_19, label = TRUE, group.by = \"celltype1\", repel = TRUE, reduction = \"umap\", label.size = 4, pt.size = 1) + NoLegend() p2 <- DimPlot(covid_19, label = FALSE, group.by = \"record_id\", repel = TRUE, reduction = \"umap\", label.size = 4, pt.size = 1) p3 <- DimPlot(covid_19, label = FALSE, group.by = \"Status\", repel = TRUE, reduction = \"umap\", label.size = 4, pt.size = 1) p1 + p2 + p3 & theme(plot.title = element_text(hjust = 0.5))"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"preprocess-data","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Preprocess data","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":", select monocytes scATAC-seq data.default, scATAC-seq counts binarized.","code":"SCEGdata <- process_data(covid_19, aggregate = FALSE, celltype = \"CD14 mono\", atac_assay = \"ATAC\", cellnames = \"celltype1\")"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"calculate-weight","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Calculate weight","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"case, select human average Hi-C data analysis.","code":"# For example, Calculate weight for monocytes mild and severe differential genes: CCR1 weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"CCR1\", averHicPath = \"/picb/bigdata/project/liangxuan/data/human_contact/AvgHiC\") ## Successfully obtained 1 TSS loci of genes from chromosome 3. ## Calculate weight of  CCR1"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"run-model","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Run model","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"SCEG-HiC uses wglasso machine learning method normalizes bulk average Hi-C matrix using rank score.","code":"# For example, Run model for monocytes mild and severe differential genes: CCR1 results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = \"CCR1\") ## The predicted genes are 1 in total. ## Run model of  CCR1"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"visualize-the-links","dir":"Articles","previous_headings":"Visualize the gene-enhancer","what":"Visualize the links","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":"","code":"temp <- tempfile() download.file(\"https://hgdownload2.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.refGene.gtf.gz\", temp) gene_anno <- rtracklayer::readGFF(temp) unlink(temp) # rename some columns to match requirements gene_anno$chromosome <- gene_anno$seqid gene_anno$gene <- gene_anno$gene_id gene_anno$transcript <- gene_anno$transcript_id gene_anno$symbol <- gene_anno$gene_name connections_Plot(results_SCEGHiC, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"CCR1\", cutoff = 0.01, gene_anno = gene_anno)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/human_covid_19_scATAC_seq_mono.html","id":"coverage-plot-and-visualize-the-links-of-ccr1","dir":"Articles","previous_headings":"Visualize the gene-enhancer","what":"Coverage plot and visualize the links of CCR1","title":"SCEG-HiC on only scATAC-seq data of human COVID 19-Mono","text":", truth monocyte sourced ENCODE database.","code":"# load the truth of monocyte data truth_mono<-readRDS(\"truth_mono.rds\")  # select monocyte celltype <- \"CD14 mono\" keep <- which(covid_19$celltype1 %in% celltype) dataset <- subset(covid_19, cells = keep)  # Coverage plot and visualize the links of CCR1 coverPlot(dataset, focus_gene = \"CCR1\", species = \"Homo sapiens\", genome = \"hg38\", assay = \"ATAC\", HIC_Result = truth_mono, SCEG_HiC_Result = results_SCEGHiC, SCEG_HiC_cutoff = 0.001, cellnames = \"Status\") sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-conda-linux-gnu ## Running under: CentOS Linux 7 (Core) ##  ## Matrix products: default ## BLAS/LAPACK: /home/liangxuan/conda/envs/test/lib/libopenblasp-r0.3.28.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Asia/Shanghai ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices datasets  utils     methods   ## [8] base      ##  ## other attached packages: ##  [1] harmony_1.2.3             Rcpp_1.0.14               ##  [3] dplyr_1.1.4               ggplot2_3.5.1             ##  [5] EnsDb.Hsapiens.v86_2.99.0 ensembldb_2.30.0          ##  [7] AnnotationFilter_1.30.0   GenomicFeatures_1.58.0    ##  [9] AnnotationDbi_1.68.0      Biobase_2.66.0            ## [11] GenomicRanges_1.58.0      GenomeInfoDb_1.42.1       ## [13] IRanges_2.40.1            S4Vectors_0.44.0          ## [15] BiocGenerics_0.52.0       Signac_1.14.9001          ## [17] Seurat_5.2.0              SeuratObject_5.0.2        ## [19] sp_2.1-4                  SCEGHiC_0.0.0.9000        ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    ProtGenerics_1.38.0         ##   [3] matrixStats_1.5.0           spatstat.sparse_3.1-0       ##   [5] bitops_1.0-9                httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          tools_4.4.2                 ##   [9] sctransform_0.4.1           backports_1.5.0             ##  [11] R6_2.5.1                    uwot_0.2.2                  ##  [13] lazyeval_0.2.2              Gviz_1.50.0                 ##  [15] cicero_1.3.9                withr_3.0.2                 ##  [17] prettyunits_1.2.0           gridExtra_2.3               ##  [19] progressr_0.15.1            cli_3.6.3                   ##  [21] textshaping_0.4.0           spatstat.explore_3.3-4      ##  [23] fastDummies_1.7.4           labeling_0.4.3              ##  [25] slam_0.1-55                 sass_0.4.9                  ##  [27] spatstat.data_3.1-4         ggridges_0.5.6              ##  [29] pbapply_1.7-2               pkgdown_2.1.1               ##  [31] Rsamtools_2.22.0            systemfonts_1.1.0           ##  [33] foreign_0.8-88              R.utils_2.12.3              ##  [35] dichromat_2.0-0.1           parallelly_1.41.0           ##  [37] BSgenome_1.74.0             VGAM_1.1-12                 ##  [39] rstudioapi_0.17.1           RSQLite_2.3.9               ##  [41] FNN_1.1.4.1                 generics_0.1.3              ##  [43] BiocIO_1.16.0               ica_1.0-3                   ##  [45] spatstat.random_3.3-2       Matrix_1.6-5                ##  [47] interp_1.1-6                ggbeeswarm_0.7.2            ##  [49] abind_1.4-8                 R.methodsS3_1.8.2           ##  [51] lifecycle_1.0.4             yaml_2.3.10                 ##  [53] SummarizedExperiment_1.36.0 SparseArray_1.6.0           ##  [55] BiocFileCache_2.14.0        Rtsne_0.17                  ##  [57] grid_4.4.2                  blob_1.2.4                  ##  [59] promises_1.3.2              crayon_1.5.3                ##  [61] miniUI_0.1.1.1              lattice_0.22-6              ##  [63] cowplot_1.1.3               KEGGREST_1.46.0             ##  [65] pillar_1.10.1               knitr_1.49                  ##  [67] boot_1.3-31                 rjson_0.2.23                ##  [69] future.apply_1.11.3         codetools_0.2-20            ##  [71] fastmatch_1.1-6             glue_1.8.0                  ##  [73] spatstat.univar_3.1-1       data.table_1.16.4           ##  [75] Rdpack_2.6.2                vctrs_0.6.5                 ##  [77] png_0.1-8                   spam_2.11-0                 ##  [79] gtable_0.3.6                assertthat_0.2.1            ##  [81] cachem_1.1.0                xfun_0.50                   ##  [83] rbibutils_2.3               S4Arrays_1.6.0              ##  [85] mime_0.12                   reformulas_0.4.0            ##  [87] survival_3.8-3              SingleCellExperiment_1.28.1 ##  [89] RcppRoll_0.3.1              fitdistrplus_1.2-2          ##  [91] ROCR_1.0-11                 nlme_3.1-166                ##  [93] bit64_4.5.2                 progress_1.2.3              ##  [95] filelock_1.0.3              RcppAnnoy_0.0.22            ##  [97] bslib_0.8.0                 irlba_2.3.5.1               ##  [99] vipor_0.4.7                 KernSmooth_2.23-26          ## [101] rpart_4.1.24                colorspace_2.1-1            ## [103] DBI_1.2.3                   Hmisc_5.2-2                 ## [105] nnet_7.3-20                 ggrastr_1.0.2               ## [107] tidyselect_1.2.1            bit_4.5.0.1                 ## [109] compiler_4.4.2              curl_6.0.1                  ## [111] httr2_1.0.7                 htmlTable_2.4.3             ## [113] xml2_1.3.6                  desc_1.4.3                  ## [115] DelayedArray_0.32.0         plotly_4.10.4               ## [117] rtracklayer_1.66.0          checkmate_2.3.2             ## [119] scales_1.3.0                lmtest_0.9-40               ## [121] rappdirs_0.3.3              goftest_1.2-3               ## [123] stringr_1.5.1               digest_0.6.37               ## [125] minqa_1.2.8                 spatstat.utils_3.1-2        ## [127] reader_1.0.6                rmarkdown_2.29              ## [129] RhpcBLASctl_0.23-42         XVector_0.46.0              ## [131] htmltools_0.5.8.1           pkgconfig_2.0.3             ## [133] jpeg_0.1-10                 base64enc_0.1-3             ## [135] lme4_1.1-36                 MatrixGenerics_1.18.1       ## [137] dbplyr_2.5.0                fastmap_1.2.0               ## [139] rlang_1.1.4                 htmlwidgets_1.6.4           ## [141] UCSC.utils_1.2.0            shiny_1.10.0                ## [143] farver_2.1.2                jquerylib_0.1.4             ## [145] zoo_1.8-12                  jsonlite_1.8.9              ## [147] BiocParallel_1.40.0         R.oo_1.27.0                 ## [149] VariantAnnotation_1.52.0    RCurl_1.98-1.16             ## [151] magrittr_2.0.3              Formula_1.2-5               ## [153] GenomeInfoDbData_1.2.13     dotCall64_1.2               ## [155] patchwork_1.3.0             munsell_0.5.1               ## [157] reticulate_1.40.0           stringi_1.8.4               ## [159] zlibbioc_1.52.0             MASS_7.3-64                 ## [161] plyr_1.8.9                  parallel_4.4.2              ## [163] listenv_0.9.1               ggrepel_0.9.6               ## [165] deldir_2.0-4                Biostrings_2.74.1           ## [167] splines_4.4.2               tensor_1.5                  ## [169] hms_1.1.3                   igraph_2.0.3                ## [171] spatstat.geom_3.3-4         RcppHNSW_0.6.0              ## [173] reshape2_1.4.4              biomaRt_2.62.0              ## [175] XML_3.99-0.17               evaluate_1.0.3              ## [177] latticeExtra_0.6-30         biovizBase_1.54.0           ## [179] renv_1.0.11                 BiocManager_1.30.25         ## [181] NCmisc_1.2.0                nloptr_2.1.1                ## [183] tweenr_2.0.3                httpuv_1.6.15               ## [185] RANN_2.6.2                  tidyr_1.3.1                 ## [187] purrr_1.0.2                 polyclip_1.10-7             ## [189] future_1.34.0               scattermore_1.2             ## [191] ggforce_0.4.2               monocle3_1.3.7              ## [193] xtable_1.8-4                restfulr_0.0.15             ## [195] RSpectra_0.16-2             later_1.4.1                 ## [197] glasso_1.11                 viridisLite_0.4.2           ## [199] ragg_1.3.3                  tibble_3.2.1                ## [201] beeswarm_0.4.0              memoise_2.0.1               ## [203] GenomicAlignments_1.42.0    cluster_2.1.8               ## [205] globals_0.16.3"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"load-the-required-libraries","dir":"Articles","previous_headings":"","what":"Load the required libraries","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"","code":"library(SCEGHiC) library(Seurat) library(Signac) library(EnsDb.Mmusculus.v79) # For mouse skin library(dplyr) library(Matrix) library(GenomicRanges) library(ggplot2)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"set-up-a-seurat-object","dir":"Articles","previous_headings":"","what":"Set up a Seurat object","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"facilitate easy exploration, mouse_skin_multiomic.rds also available 10.5281/zenodo.14849886.","code":"# load the RNA and ATAC data ct <- read.table(\"GSM4156597_skin_celltype.txt\", header = T, sep = \"\\t\") # first column: atac barcode # second column: rna barcode # third column: annotated cell type from the paper  rna.count <- read.table(\"GSM4156608_skin.late.anagen.rna.counts.txt.gz\", header = T, row.names = 1)  # match the rna.count with the cell type labels any(is.na(match(ct$rna.bc, colnames(rna.count)))) ## [1] FALSE rna.count <- rna.count[, match(ct$rna.bc, colnames(rna.count))]  # The barcode file is the same as the annotation ct; omitted colnames(rna.count) <- ct$atac.bc peak.barcodes <- scan(\"GSM4156597_skin.late.anagen.barcodes.txt.gz\", what = \"\") all(ct$rna.bc == peak.barcodes) ## [1] TRUE # Read in the peak matrix: stored as Market matrix peak.count <- readMM(\"GSM4156597_skin.late.anagen.counts.txt.gz\") dim(peak.count) ## [1] 344592  34774 peak.bed <- read.delim(\"GSM4156597_skin.late.anagen.peaks.bed.gz\", header = FALSE) peak.granges <- GRanges(seqnames = peak.bed$V1, ranges = IRanges(st = peak.bed$V2, end = peak.bed$V3)) rownames(peak.count) <- paste(peak.granges) colnames(peak.count) <- ct$atac.bc # create a Seurat object containing the RNA data skin <- CreateSeuratObject(counts = rna.count, assay = \"RNA\")  # Now add in the ATAC-seq data # we'll only use peaks in standard chromosomes grange.use <- seqnames(peak.granges) %in% standardChromosomes(peak.granges) peak.count <- peak.count[as.vector(grange.use), ] peak.granges <- peak.granges[as.vector(grange.use)]  # get gene annotations for mm10 annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79) seqlevels(annotations) <- paste0(\"chr\", seqlevels(annotations)) genome(annotations) <- \"mm10\"  # create ATAC assay and add it to the object peak.count <- peak.count[rowSums(peak.count) > 10, ] fragpath <- \"GSM4156597_skin.late.anagen.atac.fragments.mybed.gz\" skin[[\"ATAC\"]] <- CreateChromatinAssay(   counts = peak.count,   sep = c(\":\", \"-\"),   fragments = fragpath,   genome = \"mm10\",   annotation = annotations ) # annotate cell types skin$celltype <- ct[match(colnames(skin), ct[, 1]), 3] skin ## An object of class Seurat  ## 367087 features across 34774 samples within 2 assays  ## Active assay: RNA (23296 features, 0 variable features) ##  1 layer present: counts ##  1 other assay present: ATAC # calculate mitochondrial QC metrics skin[[\"percent.mt\"]] <- PercentageFeatureSet(skin, pattern = \"^MT-\")  # Quality control DefaultAssay(skin) <- \"ATAC\" skin <- NucleosomeSignal(skin) skin <- TSSEnrichment(skin) VlnPlot(   object = skin,   features = c(\"nCount_RNA\", \"nCount_ATAC\", \"TSS.enrichment\", \"nucleosome_signal\"),   ncol = 4,   pt.size = 0 ) # filter out low quality cells skin <- subset(   x = skin,   subset = nCount_ATAC < 20000 &     nCount_RNA < 5000 &     nCount_ATAC > 500 &     nCount_RNA > 500 &     nucleosome_signal < 1 &     TSS.enrichment > 1 ) skin ## An object of class Seurat  ## 367087 features across 28821 samples within 2 assays  ## Active assay: ATAC (343791 features, 0 variable features) ##  2 layers present: counts, data ##  1 other assay present: RNA # call peaks using MACS2 peaks <- CallPeaks(skin) # remove peaks on nonstandard chromosomes and in genomic blacklist regions peaks <- keepStandardChromosomes(peaks, pruning.mode = \"coarse\") peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_mm10, invert = TRUE) # quantify counts in each peak macs2_counts <- FeatureMatrix(   fragments = Fragments(skin),   features = peaks,   cells = colnames(skin) ) ## Extracting reads overlapping genomic regions # create a new assay using the MACS2 peak set and add it to the Seurat object skin[[\"peaks\"]] <- CreateChromatinAssay(   counts = macs2_counts,   fragments = fragpath,   annotation = annotations ) ## Computing hash skin ## An object of class Seurat  ## 562259 features across 28821 samples within 3 assays  ## Active assay: ATAC (343791 features, 0 variable features) ##  2 layers present: counts, data ##  2 other assays present: RNA, peaks"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"rna-analysis","dir":"Articles","previous_headings":"Set up a Seurat object","what":"RNA analysis","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"","code":"DefaultAssay(skin) <- \"RNA\" skin <- SCTransform(skin) skin <- RunPCA(skin)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"atac-analysis","dir":"Articles","previous_headings":"Set up a Seurat object","what":"ATAC analysis","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"","code":"DefaultAssay(skin) <- \"peaks\" skin <- FindTopFeatures(skin, min.cutoff = 5) skin <- RunTFIDF(skin) skin <- RunSVD(skin)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"intergration-analysis","dir":"Articles","previous_headings":"Set up a Seurat object","what":"Intergration analysis","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"","code":"# build a joint neighbor graph using both assays skin <- FindMultiModalNeighbors(   object = skin,   reduction.list = list(\"pca\", \"lsi\"),   dims.list = list(1:50, 2:40),   modality.weight.name = \"RNA.weight\",   verbose = TRUE )  # build a joint UMAP visualization skin <- RunUMAP(   object = skin,   nn.name = \"weighted.nn\",   assay = \"RNA\",   verbose = TRUE )  DimPlot(skin, reduction = \"umap\", group.by = \"celltype\", label = TRUE, label.size = 2.5, repel = TRUE) + NoLegend()"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"preprocess-data","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Preprocess data","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":", aggregated paired scRNA-seq scATAC-seq data.default, scATAC-seq counts binarized.","code":"SCEGdata <- process_data(skin, cellnames = \"celltype\", max_overlap = 0.5) ## Generating aggregated data ## Aggregating cluster Dermal Fibroblast ## Sample cells randomly. ## have 18 samples ## Aggregating cluster Dermal Papilla ## Sample cells randomly. ## have 14 samples ## Aggregating cluster TAC-1 ## Sample cells randomly. ## have 65 samples ## Aggregating cluster Mix ## Sample cells randomly. ## have 53 samples ## Aggregating cluster IRS ## Sample cells randomly. ## have 13 samples ## Aggregating cluster Basal ## Sample cells randomly. ## Warning in asMethod(object): sparse->dense coercion: allocating vector of size ## 1.1 GiB ## have 135 samples ## Aggregating cluster K6+ Bulge Companion Layer ## Sample cells randomly. ## have 11 samples ## Aggregating cluster Medulla ## Sample cells randomly. ## have 17 samples ## Aggregating cluster alowCD34+ bulge ## Sample cells randomly. ## have 32 samples ## Aggregating cluster Isthmus ## Sample cells randomly. ## have 12 samples ## Aggregating cluster ORS ## Sample cells randomly. ## have 16 samples ## Aggregating cluster Infundibulum ## Sample cells randomly. ## have 74 samples ## Aggregating cluster Spinous ## Sample cells randomly. ## have 56 samples ## Aggregating cluster ahighCD34+ bulge ## Sample cells randomly. ## have 27 samples ## Aggregating cluster TAC-2 ## Sample cells randomly. ## have 19 samples ## Aggregating cluster Macrophage DC ## Sample cells randomly. ## have 4 samples ## Aggregating cluster Endothelial ## Sample cells randomly. ## have 16 samples ## Aggregating cluster Dermal Sheath ## Sample cells randomly. ## have 8 samples ## Aggregating cluster Sebaceous Gland ## Sample cells randomly. ## have 3 samples ## Aggregating cluster Granular ## Sample cells randomly. ## have 5 samples ## Aggregating cluster Hair Shaft-cuticle.cortex ## Sample cells randomly. ## have 22 samples ## Aggregating cluster Schwann Cell ## Sample cells randomly. ## have 3 samples ## Aggregating cluster Melanocyte ## Sample cells randomly. ## have 3 samples"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"calculate-weight","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Calculate weight","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"case, select mouse average Hi-C data analysis. can select 3000 highly variable features:","code":"gene <- skin@assays[[\"SCT\"]]@var.features weight <- calculateHiCWeights(SCEGdata, species = \"Mus musculus\", genome = \"mm10\", focus_gene = gene, averHicPath = \"/picb/bigdata/project/liangxuan/data/mouse_contact/average\") # For example, Calculate weight for Basal's markers: Krt5 and Krt14 weight <- calculateHiCWeights(SCEGdata, species = \"Mus musculus\", genome = \"mm10\", focus_gene = c(\"Krt5\", \"Krt14\"), averHicPath = \"/picb/bigdata/project/liangxuan/data/mouse_contact/average\") ## Successfully obtained 1 TSS loci of genes from chromosome 11. ## Calculate weight of  Krt14 ## Successfully obtained 1 TSS loci of genes from chromosome 15. ## Calculate weight of  Krt5"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"run-model","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Run model","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"SCEG-HiC uses wglasso machine learning method normalizes bulk average Hi-C matrix using rank score.","code":"# For example, Run model for Basal's markers: Krt5 and Krt14 results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = c(\"Krt5\", \"Krt14\")) ## The predicted genes are 2 in total. ## Run model of  Krt14 ## Run model of  Krt5"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"visualize-the-links","dir":"Articles","previous_headings":"Visualize the gene-enhancer","what":"Visualize the links","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":"visualize links Krt5  visualize links Krt14","code":"temp <- tempfile() download.file(\"https://hgdownload2.soe.ucsc.edu/goldenPath/mm10/bigZips/genes/mm10.refGene.gtf.gz\", temp) gene_anno <- rtracklayer::readGFF(temp) unlink(temp) # rename some columns to match requirements gene_anno$chromosome <- gene_anno$seqid gene_anno$gene <- gene_anno$gene_id gene_anno$transcript <- gene_anno$transcript_id gene_anno$symbol <- gene_anno$gene_name connections_Plot(results_SCEGHiC, species = \"Mus musculus\", genome = \"mm10\", focus_gene = \"Krt5\", cutoff = 0.01, gene_anno = gene_anno) connections_Plot(results_SCEGHiC, species = \"Mus musculus\", genome = \"mm10\", focus_gene = \"Krt14\", cutoff = 0.01, gene_anno = gene_anno)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/mouse_skin_multiomic_aggregate.html","id":"coverage-plot-and-visualize-the-links-of-krt5-and-krt14","dir":"Articles","previous_headings":"Visualize the gene-enhancer","what":"Coverage plot and visualize the links of Krt5 and Krt14","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of mouse skin-aggregate","text":", truth Basal sourced GSE197024, correlation calculated computing Pearson correlation coefficient gene enhancer.","code":"# load the truth of Basal data truth_Basal<-readRDS(\"truth_Basal.rds\")  ## load correlation data correlation<-readRDS(\"correlation_Basal.rds\")  # Coverage plot and visualize the links of Krt5  p1 <- coverPlot(skin, focus_gene = \"Krt5\", species = \"Mus musculus\", genome = \"mm10\", assay = \"peaks\", HIC_Result = truth_Basal, SCEG_HiC_Result = results_SCEGHiC, SCEG_HiC_cutoff = 0.01, correlation = correlation, cells = c(\"Basal\", \"Spinous\", \"Granular\"), cellnames = \"celltype\")  # Coverage plot and visualize the links of Krt14  p2 <- coverPlot(skin, focus_gene = \"Krt14\", species = \"Mus musculus\", genome = \"mm10\", assay = \"peaks\", HIC_Result = truth_Basal, SCEG_HiC_Result = results_SCEGHiC, SCEG_HiC_cutoff = 0.01, correlation = correlation, cells = c(\"Basal\", \"Spinous\", \"Granular\"), cellnames = \"celltype\")  patchwork::wrap_plots(p1, p2, ncol = 1) sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-conda-linux-gnu ## Running under: CentOS Linux 7 (Core) ##  ## Matrix products: default ## BLAS/LAPACK: /home/liangxuan/conda/envs/test/lib/libopenblasp-r0.3.28.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Asia/Shanghai ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices datasets  utils     methods   ## [8] base      ##  ## other attached packages: ##  [1] ggplot2_3.5.1              Matrix_1.6-5               ##  [3] dplyr_1.1.4                EnsDb.Mmusculus.v79_2.99.0 ##  [5] ensembldb_2.30.0           AnnotationFilter_1.30.0    ##  [7] GenomicFeatures_1.58.0     AnnotationDbi_1.68.0       ##  [9] Biobase_2.66.0             GenomicRanges_1.58.0       ## [11] GenomeInfoDb_1.42.1        IRanges_2.40.1             ## [13] S4Vectors_0.44.0           BiocGenerics_0.52.0        ## [15] Signac_1.14.9001           Seurat_5.2.0               ## [17] SeuratObject_5.0.2         sp_2.1-4                   ## [19] SCEGHiC_0.0.0.9000         ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    ProtGenerics_1.38.0         ##   [3] matrixStats_1.5.0           spatstat.sparse_3.1-0       ##   [5] bitops_1.0-9                httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          tools_4.4.2                 ##   [9] sctransform_0.4.1           backports_1.5.0             ##  [11] R6_2.5.1                    uwot_0.2.2                  ##  [13] lazyeval_0.2.2              Gviz_1.50.0                 ##  [15] cicero_1.3.9                withr_3.0.2                 ##  [17] prettyunits_1.2.0           gridExtra_2.3               ##  [19] progressr_0.15.1            cli_3.6.3                   ##  [21] textshaping_0.4.0           spatstat.explore_3.3-4      ##  [23] fastDummies_1.7.4           labeling_0.4.3              ##  [25] slam_0.1-55                 sass_0.4.9                  ##  [27] spatstat.data_3.1-4         ggridges_0.5.6              ##  [29] pbapply_1.7-2               pkgdown_2.1.1               ##  [31] Rsamtools_2.22.0            systemfonts_1.1.0           ##  [33] foreign_0.8-88              R.utils_2.12.3              ##  [35] dichromat_2.0-0.1           parallelly_1.41.0           ##  [37] BSgenome_1.74.0             VGAM_1.1-12                 ##  [39] rstudioapi_0.17.1           RSQLite_2.3.9               ##  [41] FNN_1.1.4.1                 generics_0.1.3              ##  [43] BiocIO_1.16.0               ica_1.0-3                   ##  [45] spatstat.random_3.3-2       interp_1.1-6                ##  [47] ggbeeswarm_0.7.2            abind_1.4-8                 ##  [49] R.methodsS3_1.8.2           lifecycle_1.0.4             ##  [51] yaml_2.3.10                 SummarizedExperiment_1.36.0 ##  [53] SparseArray_1.6.0           BiocFileCache_2.14.0        ##  [55] Rtsne_0.17                  grid_4.4.2                  ##  [57] blob_1.2.4                  promises_1.3.2              ##  [59] crayon_1.5.3                miniUI_0.1.1.1              ##  [61] lattice_0.22-6              cowplot_1.1.3               ##  [63] KEGGREST_1.46.0             pillar_1.10.1               ##  [65] knitr_1.49                  boot_1.3-31                 ##  [67] rjson_0.2.23                future.apply_1.11.3         ##  [69] codetools_0.2-20            fastmatch_1.1-6             ##  [71] glue_1.8.0                  spatstat.univar_3.1-1       ##  [73] data.table_1.16.4           Rdpack_2.6.2                ##  [75] vctrs_0.6.5                 png_0.1-8                   ##  [77] spam_2.11-0                 gtable_0.3.6                ##  [79] assertthat_0.2.1            cachem_1.1.0                ##  [81] xfun_0.50                   rbibutils_2.3               ##  [83] S4Arrays_1.6.0              mime_0.12                   ##  [85] reformulas_0.4.0            survival_3.8-3              ##  [87] SingleCellExperiment_1.28.1 RcppRoll_0.3.1              ##  [89] fitdistrplus_1.2-2          ROCR_1.0-11                 ##  [91] nlme_3.1-166                bit64_4.5.2                 ##  [93] progress_1.2.3              filelock_1.0.3              ##  [95] RcppAnnoy_0.0.22            bslib_0.8.0                 ##  [97] irlba_2.3.5.1               vipor_0.4.7                 ##  [99] KernSmooth_2.23-26          rpart_4.1.24                ## [101] colorspace_2.1-1            DBI_1.2.3                   ## [103] Hmisc_5.2-2                 nnet_7.3-20                 ## [105] ggrastr_1.0.2               tidyselect_1.2.1            ## [107] bit_4.5.0.1                 compiler_4.4.2              ## [109] curl_6.0.1                  httr2_1.0.7                 ## [111] htmlTable_2.4.3             xml2_1.3.6                  ## [113] desc_1.4.3                  DelayedArray_0.32.0         ## [115] plotly_4.10.4               rtracklayer_1.66.0          ## [117] checkmate_2.3.2             scales_1.3.0                ## [119] lmtest_0.9-40               rappdirs_0.3.3              ## [121] goftest_1.2-3               stringr_1.5.1               ## [123] digest_0.6.37               minqa_1.2.8                 ## [125] spatstat.utils_3.1-2        reader_1.0.6                ## [127] rmarkdown_2.29              XVector_0.46.0              ## [129] htmltools_0.5.8.1           pkgconfig_2.0.3             ## [131] jpeg_0.1-10                 base64enc_0.1-3             ## [133] lme4_1.1-36                 MatrixGenerics_1.18.1       ## [135] dbplyr_2.5.0                fastmap_1.2.0               ## [137] rlang_1.1.4                 htmlwidgets_1.6.4           ## [139] UCSC.utils_1.2.0            shiny_1.10.0                ## [141] farver_2.1.2                jquerylib_0.1.4             ## [143] zoo_1.8-12                  jsonlite_1.8.9              ## [145] BiocParallel_1.40.0         R.oo_1.27.0                 ## [147] VariantAnnotation_1.52.0    RCurl_1.98-1.16             ## [149] magrittr_2.0.3              Formula_1.2-5               ## [151] GenomeInfoDbData_1.2.13     dotCall64_1.2               ## [153] patchwork_1.3.0             munsell_0.5.1               ## [155] Rcpp_1.0.14                 reticulate_1.40.0           ## [157] stringi_1.8.4               zlibbioc_1.52.0             ## [159] MASS_7.3-64                 plyr_1.8.9                  ## [161] parallel_4.4.2              listenv_0.9.1               ## [163] ggrepel_0.9.6               deldir_2.0-4                ## [165] Biostrings_2.74.1           splines_4.4.2               ## [167] tensor_1.5                  hms_1.1.3                   ## [169] igraph_2.0.3                spatstat.geom_3.3-4         ## [171] RcppHNSW_0.6.0              reshape2_1.4.4              ## [173] biomaRt_2.62.0              XML_3.99-0.17               ## [175] evaluate_1.0.3              latticeExtra_0.6-30         ## [177] biovizBase_1.54.0           renv_1.0.11                 ## [179] BiocManager_1.30.25         NCmisc_1.2.0                ## [181] nloptr_2.1.1                tweenr_2.0.3                ## [183] httpuv_1.6.15               RANN_2.6.2                  ## [185] tidyr_1.3.1                 purrr_1.0.2                 ## [187] polyclip_1.10-7             future_1.34.0               ## [189] scattermore_1.2             ggforce_0.4.2               ## [191] monocle3_1.3.7              xtable_1.8-4                ## [193] restfulr_0.0.15             RSpectra_0.16-2             ## [195] later_1.4.1                 glasso_1.11                 ## [197] viridisLite_0.4.2           ragg_1.3.3                  ## [199] tibble_3.2.1                beeswarm_0.4.0              ## [201] memoise_2.0.1               GenomicAlignments_1.42.0    ## [203] cluster_2.1.8               globals_0.16.3"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_CD4T.html","id":"load-the-required-libraries","dir":"Articles","previous_headings":"","what":"Load the required libraries","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-CD4T","text":"","code":"library(SCEGHiC) library(Signac) library(Seurat) library(EnsDb.Hsapiens.v86) library(BSgenome.Hsapiens.UCSC.hg38) library(ggplot2)"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_CD4T.html","id":"preprocess-data","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Preprocess data","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-CD4T","text":", select CD8 T cells paired scRNA-seq scATAC-seq data.default, scATAC-seq counts binarized.","code":"# load data pbmc<-readRDS(\"pbmc_multiomic.rds\") SCEGdata <- process_data(pbmc, aggregate = FALSE, celltype = \"CD4 T\", rna_assay = \"SCT\")"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_CD4T.html","id":"calculate-weight","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Calculate weight","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-CD4T","text":"SCEG-HiC takes long time calculate weight, process becomes slower genes selected. SCEG-HiC provides download websites average Hi-C data humans mice. case, select human average Hi-C data analysis.","code":"# For example, Calculate weight for CD4 T's markers: GLB1 weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"GLB1\", averHicPath = \"/picb/bigdata/project/liangxuan/data/human_contact/AvgHiC\") ## Successfully obtained 1 TSS loci of genes from chromosome 3. ## Calculate weight of  GLB1"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_CD4T.html","id":"run-model","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Run model","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-CD4T","text":"SCEG-HiC uses wglasso machine learning method normalizes bulk average Hi-C matrix using rank score.","code":"# For example, Run model for CD4 T's markers: GLB1 results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = \"GLB1\") ## The predicted genes are 1 in total. ## Run model of  GLB1"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_CD4T.html","id":"visualize-the-links","dir":"Articles","previous_headings":"Visualize the gene-enhancer","what":"Visualize the links","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-CD4T","text":"","code":"temp <- tempfile() download.file(\"https://hgdownload2.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.refGene.gtf.gz\", temp) gene_anno <- rtracklayer::readGFF(temp) unlink(temp) # rename some columns to match requirements gene_anno$chromosome <- gene_anno$seqid gene_anno$gene <- gene_anno$gene_id gene_anno$transcript <- gene_anno$transcript_id gene_anno$symbol <- gene_anno$gene_name connections_Plot(results_SCEGHiC, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"GLB1\", cutoff = 0.001, gene_anno = gene_anno) sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-conda-linux-gnu ## Running under: CentOS Linux 7 (Core) ##  ## Matrix products: default ## BLAS/LAPACK: /home/liangxuan/conda/envs/test/lib/libopenblasp-r0.3.28.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Asia/Shanghai ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices datasets  utils     methods   ## [8] base      ##  ## other attached packages: ##  [1] ggplot2_3.5.1                     BSgenome.Hsapiens.UCSC.hg38_1.4.5 ##  [3] BSgenome_1.74.0                   rtracklayer_1.66.0                ##  [5] BiocIO_1.16.0                     Biostrings_2.74.1                 ##  [7] XVector_0.46.0                    EnsDb.Hsapiens.v86_2.99.0         ##  [9] ensembldb_2.30.0                  AnnotationFilter_1.30.0           ## [11] GenomicFeatures_1.58.0            AnnotationDbi_1.68.0              ## [13] Biobase_2.66.0                    GenomicRanges_1.58.0              ## [15] GenomeInfoDb_1.42.1               IRanges_2.40.1                    ## [17] S4Vectors_0.44.0                  BiocGenerics_0.52.0               ## [19] Seurat_5.2.0                      SeuratObject_5.0.2                ## [21] sp_2.1-4                          Signac_1.14.9001                  ## [23] SCEGHiC_0.0.0.9000                ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    ProtGenerics_1.38.0         ##   [3] matrixStats_1.5.0           spatstat.sparse_3.1-0       ##   [5] bitops_1.0-9                httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          tools_4.4.2                 ##   [9] sctransform_0.4.1           backports_1.5.0             ##  [11] R6_2.5.1                    uwot_0.2.2                  ##  [13] lazyeval_0.2.2              Gviz_1.50.0                 ##  [15] cicero_1.3.9                withr_3.0.2                 ##  [17] prettyunits_1.2.0           gridExtra_2.3               ##  [19] progressr_0.15.1            cli_3.6.3                   ##  [21] textshaping_0.4.0           spatstat.explore_3.3-4      ##  [23] fastDummies_1.7.4           slam_0.1-55                 ##  [25] sass_0.4.9                  spatstat.data_3.1-4         ##  [27] ggridges_0.5.6              pbapply_1.7-2               ##  [29] pkgdown_2.1.1               Rsamtools_2.22.0            ##  [31] systemfonts_1.1.0           foreign_0.8-88              ##  [33] R.utils_2.12.3              dichromat_2.0-0.1           ##  [35] parallelly_1.41.0           VGAM_1.1-12                 ##  [37] rstudioapi_0.17.1           RSQLite_2.3.9               ##  [39] FNN_1.1.4.1                 generics_0.1.3              ##  [41] ica_1.0-3                   spatstat.random_3.3-2       ##  [43] dplyr_1.1.4                 Matrix_1.6-5                ##  [45] interp_1.1-6                abind_1.4-8                 ##  [47] R.methodsS3_1.8.2           lifecycle_1.0.4             ##  [49] yaml_2.3.10                 SummarizedExperiment_1.36.0 ##  [51] SparseArray_1.6.0           BiocFileCache_2.14.0        ##  [53] Rtsne_0.17                  grid_4.4.2                  ##  [55] blob_1.2.4                  promises_1.3.2              ##  [57] crayon_1.5.3                miniUI_0.1.1.1              ##  [59] lattice_0.22-6              cowplot_1.1.3               ##  [61] KEGGREST_1.46.0             pillar_1.10.1               ##  [63] knitr_1.49                  boot_1.3-31                 ##  [65] rjson_0.2.23                future.apply_1.11.3         ##  [67] codetools_0.2-20            fastmatch_1.1-6             ##  [69] glue_1.8.0                  spatstat.univar_3.1-1       ##  [71] data.table_1.16.4           Rdpack_2.6.2                ##  [73] vctrs_0.6.5                 png_0.1-8                   ##  [75] spam_2.11-0                 gtable_0.3.6                ##  [77] assertthat_0.2.1            cachem_1.1.0                ##  [79] xfun_0.50                   rbibutils_2.3               ##  [81] S4Arrays_1.6.0              mime_0.12                   ##  [83] reformulas_0.4.0            survival_3.8-3              ##  [85] SingleCellExperiment_1.28.1 RcppRoll_0.3.1              ##  [87] fitdistrplus_1.2-2          ROCR_1.0-11                 ##  [89] nlme_3.1-166                bit64_4.5.2                 ##  [91] progress_1.2.3              filelock_1.0.3              ##  [93] RcppAnnoy_0.0.22            bslib_0.8.0                 ##  [95] irlba_2.3.5.1               KernSmooth_2.23-26          ##  [97] rpart_4.1.24                colorspace_2.1-1            ##  [99] DBI_1.2.3                   Hmisc_5.2-2                 ## [101] nnet_7.3-20                 tidyselect_1.2.1            ## [103] bit_4.5.0.1                 compiler_4.4.2              ## [105] curl_6.0.1                  httr2_1.0.7                 ## [107] htmlTable_2.4.3             xml2_1.3.6                  ## [109] desc_1.4.3                  DelayedArray_0.32.0         ## [111] plotly_4.10.4               checkmate_2.3.2             ## [113] scales_1.3.0                lmtest_0.9-40               ## [115] rappdirs_0.3.3              goftest_1.2-3               ## [117] stringr_1.5.1               digest_0.6.37               ## [119] minqa_1.2.8                 spatstat.utils_3.1-2        ## [121] reader_1.0.6                rmarkdown_2.29              ## [123] htmltools_0.5.8.1           pkgconfig_2.0.3             ## [125] jpeg_0.1-10                 base64enc_0.1-3             ## [127] lme4_1.1-36                 MatrixGenerics_1.18.1       ## [129] dbplyr_2.5.0                fastmap_1.2.0               ## [131] rlang_1.1.4                 htmlwidgets_1.6.4           ## [133] UCSC.utils_1.2.0            shiny_1.10.0                ## [135] farver_2.1.2                jquerylib_0.1.4             ## [137] zoo_1.8-12                  jsonlite_1.8.9              ## [139] BiocParallel_1.40.0         R.oo_1.27.0                 ## [141] VariantAnnotation_1.52.0    RCurl_1.98-1.16             ## [143] magrittr_2.0.3              Formula_1.2-5               ## [145] GenomeInfoDbData_1.2.13     dotCall64_1.2               ## [147] patchwork_1.3.0             munsell_0.5.1               ## [149] Rcpp_1.0.14                 reticulate_1.40.0           ## [151] stringi_1.8.4               zlibbioc_1.52.0             ## [153] MASS_7.3-64                 plyr_1.8.9                  ## [155] parallel_4.4.2              listenv_0.9.1               ## [157] ggrepel_0.9.6               deldir_2.0-4                ## [159] splines_4.4.2               tensor_1.5                  ## [161] hms_1.1.3                   igraph_2.0.3                ## [163] spatstat.geom_3.3-4         RcppHNSW_0.6.0              ## [165] reshape2_1.4.4              biomaRt_2.62.0              ## [167] XML_3.99-0.17               evaluate_1.0.3              ## [169] latticeExtra_0.6-30         biovizBase_1.54.0           ## [171] renv_1.0.11                 BiocManager_1.30.25         ## [173] NCmisc_1.2.0                nloptr_2.1.1                ## [175] tweenr_2.0.3                httpuv_1.6.15               ## [177] RANN_2.6.2                  tidyr_1.3.1                 ## [179] purrr_1.0.2                 polyclip_1.10-7             ## [181] future_1.34.0               scattermore_1.2             ## [183] ggforce_0.4.2               monocle3_1.3.7              ## [185] xtable_1.8-4                restfulr_0.0.15             ## [187] RSpectra_0.16-2             later_1.4.1                 ## [189] glasso_1.11                 viridisLite_0.4.2           ## [191] ragg_1.3.3                  tibble_3.2.1                ## [193] memoise_2.0.1               GenomicAlignments_1.42.0    ## [195] cluster_2.1.8               globals_0.16.3"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"load-the-required-libraries","dir":"Articles","previous_headings":"","what":"Load the required libraries","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"","code":"library(SCEGHiC) library(Signac) library(Seurat) library(EnsDb.Hsapiens.v86) library(BSgenome.Hsapiens.UCSC.hg38) library(ggplot2) library(hdf5r)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"set-up-a-seurat-object","dir":"Articles","previous_headings":"","what":"Set up a Seurat object","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"facilitate easy exploration, pbmc_multiomic.rds also available 10.5281/zenodo.14849886.","code":"# load the RNA and ATAC data counts <- Read10X_h5(\"pbmc_granulocyte_sorted_10k_filtered_feature_bc_matrix.h5\") fragpath <- \"pbmc_granulocyte_sorted_10k_atac_fragments.tsv.gz\" # get gene annotations for hg38 annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86) seqlevels(annotation) <- paste0(\"chr\", seqlevels(annotation))  # create a Seurat object containing the RNA data pbmc <- CreateSeuratObject(   counts = counts$`Gene Expression`,   assay = \"RNA\" )  # create ATAC assay and add it to the object pbmc[[\"ATAC\"]] <- CreateChromatinAssay(   counts = counts$Peaks,   sep = c(\":\", \"-\"),   fragments = fragpath,   annotation = annotation ) pbmc ## An object of class Seurat  ## 144978 features across 11909 samples within 2 assays  ## Active assay: RNA (36601 features, 0 variable features) ##  1 layer present: counts ##  1 other assay present: ATAC # Quality control DefaultAssay(pbmc) <- \"ATAC\"  pbmc <- NucleosomeSignal(pbmc) pbmc <- TSSEnrichment(pbmc)  VlnPlot(   object = pbmc,   features = c(\"nCount_RNA\", \"nCount_ATAC\", \"TSS.enrichment\", \"nucleosome_signal\"),   ncol = 4,   pt.size = 0 ) # filter out low quality cells pbmc <- subset(   x = pbmc,   subset = nCount_ATAC < 100000 &     nCount_RNA < 25000 &     nCount_ATAC > 1800 &     nCount_RNA > 1000 &     nucleosome_signal < 2 &     TSS.enrichment > 1 ) pbmc ## An object of class Seurat  ## 144978 features across 11070 samples within 2 assays  ## Active assay: ATAC (108377 features, 0 variable features) ##  2 layers present: counts, data ##  1 other assay present: RNA # call peaks using MACS2 peaks <- CallPeaks(pbmc) # remove peaks on nonstandard chromosomes and in genomic blacklist regions peaks <- keepStandardChromosomes(peaks, pruning.mode = \"coarse\") peaks <- subsetByOverlaps(x = peaks, ranges = blacklist_hg38_unified, invert = TRUE) # quantify counts in each peak macs2_counts <- FeatureMatrix(   fragments = Fragments(pbmc),   features = peaks,   cells = colnames(pbmc) ) ## Extracting reads overlapping genomic regions # create a new assay using the MACS2 peak set and add it to the Seurat object pbmc[[\"peaks\"]] <- CreateChromatinAssay(   counts = macs2_counts,   fragments = fragpath,   annotation = annotation ) ## Computing hash pbmc ## An object of class Seurat  ## 276342 features across 11070 samples within 3 assays  ## Active assay: ATAC (108377 features, 0 variable features) ##  2 layers present: counts, data ##  2 other assays present: RNA, peaks"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"rna-analysis","dir":"Articles","previous_headings":"Set up a Seurat object","what":"RNA analysis","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"","code":"DefaultAssay(pbmc) <- \"RNA\" pbmc <- SCTransform(pbmc) pbmc <- RunPCA(pbmc)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"atac-analysis","dir":"Articles","previous_headings":"Set up a Seurat object","what":"ATAC analysis","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"","code":"DefaultAssay(pbmc) <- \"ATAC\" pbmc <- FindTopFeatures(pbmc, min.cutoff = 5) pbmc <- RunTFIDF(pbmc) pbmc <- RunSVD(pbmc)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"annotating-cell-types-and-intergration-analysis","dir":"Articles","previous_headings":"Set up a Seurat object","what":"Annotating cell types and Intergration analysis","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"’ll use annotated PBMC reference dataset Hao et al. (2020), available download : https://atlas.fredhutch.org/data/nygc/multimodal/pbmc_multimodal.h5seurat. Using weighted nearest neighbor methods Seurat v4, can compute joint neighbor graph represent gene expression DNA accessibility measurements.","code":"library(SeuratDisk)  # load PBMC reference reference <- LoadH5Seurat(\"pbmc_multimodal.h5seurat\", assays = list(\"SCT\" = \"counts\"), reductions = \"spca\") reference <- UpdateSeuratObject(reference)  DefaultAssay(pbmc) <- \"SCT\"  # transfer cell type labels from reference to query transfer_anchors <- FindTransferAnchors(   reference = reference,   query = pbmc,   normalization.method = \"SCT\",   reference.reduction = \"spca\",   recompute.residuals = FALSE,   dims = 1:50 )  predictions <- TransferData(   anchorset = transfer_anchors,   refdata = reference$celltype.l1,   weight.reduction = pbmc[[\"pca\"]],   dims = 1:50 )  pbmc <- AddMetaData(   object = pbmc,   metadata = predictions )  # set the cell identities to the cell type predictions Idents(pbmc) <- \"predicted.id\"  levels(pbmc) <- c(\"CD4 T\", \"CD8 T\", \"Mono\", \"NK\", \"B\", \"DC\", \"other T\", \"other\") # build a joint neighbor graph using both assays pbmc <- FindMultiModalNeighbors(   object = pbmc,   reduction.list = list(\"pca\", \"lsi\"),   dims.list = list(1:50, 2:40),   modality.weight.name = \"RNA.weight\",   verbose = TRUE )  # build a joint UMAP visualization pbmc <- RunUMAP(   object = pbmc,   nn.name = \"weighted.nn\",   assay = \"RNA\",   verbose = TRUE )  DimPlot(pbmc, label = TRUE, repel = TRUE, reduction = \"umap\") + NoLegend()"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"preprocess-data","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Preprocess data","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"preprocessing data SCEG-HiC, can choose clustering single-cell type analysis. default, scATAC-seq counts binarized.addition, can select either paired scRNA-seq scATAC-seq data scATAC-seq data. , aggregated paired scRNA-seq scATAC-seq data.","code":"SCEGdata <- process_data(pbmc, max_overlap = 0.5) ## Generating aggregated data ## Aggregating cluster CD4 T ## Sample cells randomly. ## have 73 samples ## Aggregating cluster CD8 T ## Sample cells randomly. ## have 41 samples ## Aggregating cluster Mono ## Sample cells randomly. ## have 79 samples ## Aggregating cluster NK ## Sample cells randomly. ## have 12 samples ## Aggregating cluster B ## Sample cells randomly. ## have 18 samples ## Aggregating cluster DC ## Sample cells randomly. ## have 5 samples ## Aggregating cluster other T ## Sample cells randomly. ## have 6 samples ## Aggregating cluster other ## Sample cells randomly. ## have 2 samples"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"calculate-weight","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Calculate weight","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"SCEG-HiC takes long time calculate weight, process becomes slower genes selected. SCEG-HiC provides download websites average Hi-C data humans mice. case, select human average Hi-C data analysis. can select 3000 highly variable features:","code":"gene <- pbmc@assays[[\"SCT\"]]@var.features weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = gene, averHicPath = \"/picb/bigdata/project/liangxuan/data/human_contact/AvgHiC\") # For example, Calculate weight for CD8 T's markers: PDK1 weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"PDK1\", averHicPath = \"/picb/bigdata/project/liangxuan/data/human_contact/AvgHiC\") ## Successfully obtained 1 TSS loci of genes from chromosome 2. ## Calculate weight of  PDK1"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"run-model","dir":"Articles","previous_headings":"Infer gene-enhancer using SCEG-HiC","what":"Run model","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"SCEG-HiC uses wglasso machine learning method normalizes bulk average Hi-C matrix using rank score.","code":"# For example, Run model for CD8 T's markers: PDK1 results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = \"PDK1\") ## The predicted genes are 1 in total. ## Run model of  PDK1"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"visualize-the-links","dir":"Articles","previous_headings":"Visualize the gene-enhancer","what":"Visualize the links","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":"","code":"temp <- tempfile() download.file(\"https://hgdownload2.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.refGene.gtf.gz\", temp) gene_anno <- rtracklayer::readGFF(temp) unlink(temp) # rename some columns to match requirements gene_anno$chromosome <- gene_anno$seqid gene_anno$gene <- gene_anno$gene_id gene_anno$transcript <- gene_anno$transcript_id gene_anno$symbol <- gene_anno$gene_name connections_Plot(results_SCEGHiC, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"PDK1\", cutoff = 0.01, gene_anno = gene_anno)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/articles/pbmc_multiomic_aggregate.html","id":"coverage-plot-and-visualize-the-links-of-pdk1","dir":"Articles","previous_headings":"Visualize the gene-enhancer","what":"Coverage plot and visualize the links of PDK1","title":"SCEG-HiC on paired scRNA-seq and scATAC-seq data of PBMC-aggregate","text":", truth CD8 T sourced ENCODE database, correlation calculated computing Pearson correlation coefficient gene enhancer.","code":"# load the truth of CD8 T data truth_CD8<-readRDS(\"truth_CD8.rds\") ## load correlation data correlation<-readRDS(\"correlation_CD8.rds\") # Coverage plot and visualize the links of PDK1 coverPlot(pbmc, focus_gene = \"PDK1\", species = \"Homo sapiens\", genome = \"hg38\", assay = \"peaks\", HIC_Result = truth_CD8, SCEG_HiC_Result = results_SCEGHiC, SCEG_HiC_cutoff = 0.01, correlation = correlation, cells = c(\"CD4 T\", \"CD8 T\")) sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-conda-linux-gnu ## Running under: CentOS Linux 7 (Core) ##  ## Matrix products: default ## BLAS/LAPACK: /home/liangxuan/conda/envs/test/lib/libopenblasp-r0.3.28.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Asia/Shanghai ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices datasets  utils     methods   ## [8] base      ##  ## other attached packages: ##  [1] SeuratDisk_0.0.0.9021             hdf5r_1.3.12                      ##  [3] ggplot2_3.5.1                     BSgenome.Hsapiens.UCSC.hg38_1.4.5 ##  [5] BSgenome_1.74.0                   rtracklayer_1.66.0                ##  [7] BiocIO_1.16.0                     Biostrings_2.74.1                 ##  [9] XVector_0.46.0                    EnsDb.Hsapiens.v86_2.99.0         ## [11] ensembldb_2.30.0                  AnnotationFilter_1.30.0           ## [13] GenomicFeatures_1.58.0            AnnotationDbi_1.68.0              ## [15] Biobase_2.66.0                    GenomicRanges_1.58.0              ## [17] GenomeInfoDb_1.42.1               IRanges_2.40.1                    ## [19] S4Vectors_0.44.0                  BiocGenerics_0.52.0               ## [21] Seurat_5.2.0                      SeuratObject_5.0.2                ## [23] sp_2.1-4                          Signac_1.14.9001                  ## [25] SCEGHiC_0.0.0.9000                ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                    ProtGenerics_1.38.0         ##   [3] matrixStats_1.5.0           spatstat.sparse_3.1-0       ##   [5] bitops_1.0-9                httr_1.4.7                  ##   [7] RColorBrewer_1.1-3          tools_4.4.2                 ##   [9] sctransform_0.4.1           backports_1.5.0             ##  [11] R6_2.5.1                    uwot_0.2.2                  ##  [13] lazyeval_0.2.2              Gviz_1.50.0                 ##  [15] cicero_1.3.9                withr_3.0.2                 ##  [17] prettyunits_1.2.0           gridExtra_2.3               ##  [19] progressr_0.15.1            cli_3.6.3                   ##  [21] textshaping_0.4.0           spatstat.explore_3.3-4      ##  [23] fastDummies_1.7.4           labeling_0.4.3              ##  [25] slam_0.1-55                 sass_0.4.9                  ##  [27] spatstat.data_3.1-4         ggridges_0.5.6              ##  [29] pbapply_1.7-2               pkgdown_2.1.1               ##  [31] Rsamtools_2.22.0            systemfonts_1.1.0           ##  [33] foreign_0.8-88              R.utils_2.12.3              ##  [35] dichromat_2.0-0.1           parallelly_1.41.0           ##  [37] VGAM_1.1-12                 rstudioapi_0.17.1           ##  [39] RSQLite_2.3.9               FNN_1.1.4.1                 ##  [41] generics_0.1.3              ica_1.0-3                   ##  [43] spatstat.random_3.3-2       dplyr_1.1.4                 ##  [45] Matrix_1.6-5                interp_1.1-6                ##  [47] ggbeeswarm_0.7.2            abind_1.4-8                 ##  [49] R.methodsS3_1.8.2           lifecycle_1.0.4             ##  [51] yaml_2.3.10                 SummarizedExperiment_1.36.0 ##  [53] SparseArray_1.6.0           BiocFileCache_2.14.0        ##  [55] Rtsne_0.17                  grid_4.4.2                  ##  [57] blob_1.2.4                  promises_1.3.2              ##  [59] crayon_1.5.3                miniUI_0.1.1.1              ##  [61] lattice_0.22-6              cowplot_1.1.3               ##  [63] KEGGREST_1.46.0             pillar_1.10.1               ##  [65] knitr_1.49                  boot_1.3-31                 ##  [67] rjson_0.2.23                future.apply_1.11.3         ##  [69] codetools_0.2-20            fastmatch_1.1-6             ##  [71] glue_1.8.0                  spatstat.univar_3.1-1       ##  [73] data.table_1.16.4           Rdpack_2.6.2                ##  [75] vctrs_0.6.5                 png_0.1-8                   ##  [77] spam_2.11-0                 gtable_0.3.6                ##  [79] assertthat_0.2.1            cachem_1.1.0                ##  [81] xfun_0.50                   rbibutils_2.3               ##  [83] S4Arrays_1.6.0              mime_0.12                   ##  [85] reformulas_0.4.0            survival_3.8-3              ##  [87] SingleCellExperiment_1.28.1 RcppRoll_0.3.1              ##  [89] fitdistrplus_1.2-2          ROCR_1.0-11                 ##  [91] nlme_3.1-166                bit64_4.5.2                 ##  [93] progress_1.2.3              filelock_1.0.3              ##  [95] RcppAnnoy_0.0.22            bslib_0.8.0                 ##  [97] irlba_2.3.5.1               vipor_0.4.7                 ##  [99] KernSmooth_2.23-26          rpart_4.1.24                ## [101] colorspace_2.1-1            DBI_1.2.3                   ## [103] Hmisc_5.2-2                 nnet_7.3-20                 ## [105] ggrastr_1.0.2               tidyselect_1.2.1            ## [107] bit_4.5.0.1                 compiler_4.4.2              ## [109] curl_6.0.1                  httr2_1.0.7                 ## [111] htmlTable_2.4.3             xml2_1.3.6                  ## [113] desc_1.4.3                  DelayedArray_0.32.0         ## [115] plotly_4.10.4               checkmate_2.3.2             ## [117] scales_1.3.0                lmtest_0.9-40               ## [119] rappdirs_0.3.3              goftest_1.2-3               ## [121] stringr_1.5.1               digest_0.6.37               ## [123] minqa_1.2.8                 spatstat.utils_3.1-2        ## [125] reader_1.0.6                rmarkdown_2.29              ## [127] htmltools_0.5.8.1           pkgconfig_2.0.3             ## [129] jpeg_0.1-10                 base64enc_0.1-3             ## [131] lme4_1.1-36                 MatrixGenerics_1.18.1       ## [133] dbplyr_2.5.0                fastmap_1.2.0               ## [135] rlang_1.1.4                 htmlwidgets_1.6.4           ## [137] UCSC.utils_1.2.0            shiny_1.10.0                ## [139] farver_2.1.2                jquerylib_0.1.4             ## [141] zoo_1.8-12                  jsonlite_1.8.9              ## [143] BiocParallel_1.40.0         R.oo_1.27.0                 ## [145] VariantAnnotation_1.52.0    RCurl_1.98-1.16             ## [147] magrittr_2.0.3              Formula_1.2-5               ## [149] GenomeInfoDbData_1.2.13     dotCall64_1.2               ## [151] patchwork_1.3.0             munsell_0.5.1               ## [153] Rcpp_1.0.14                 reticulate_1.40.0           ## [155] stringi_1.8.4               zlibbioc_1.52.0             ## [157] MASS_7.3-64                 plyr_1.8.9                  ## [159] parallel_4.4.2              listenv_0.9.1               ## [161] ggrepel_0.9.6               deldir_2.0-4                ## [163] splines_4.4.2               tensor_1.5                  ## [165] hms_1.1.3                   igraph_2.0.3                ## [167] spatstat.geom_3.3-4         RcppHNSW_0.6.0              ## [169] reshape2_1.4.4              biomaRt_2.62.0              ## [171] XML_3.99-0.17               evaluate_1.0.3              ## [173] latticeExtra_0.6-30         biovizBase_1.54.0           ## [175] renv_1.0.11                 BiocManager_1.30.25         ## [177] NCmisc_1.2.0                nloptr_2.1.1                ## [179] tweenr_2.0.3                httpuv_1.6.15               ## [181] RANN_2.6.2                  tidyr_1.3.1                 ## [183] purrr_1.0.2                 polyclip_1.10-7             ## [185] future_1.34.0               scattermore_1.2             ## [187] ggforce_0.4.2               monocle3_1.3.7              ## [189] xtable_1.8-4                restfulr_0.0.15             ## [191] RSpectra_0.16-2             later_1.4.1                 ## [193] glasso_1.11                 viridisLite_0.4.2           ## [195] ragg_1.3.3                  tibble_3.2.1                ## [197] beeswarm_0.4.0              memoise_2.0.1               ## [199] GenomicAlignments_1.42.0    cluster_2.1.8               ## [201] globals_0.16.3"},{"path":"https://wuwei77lx.github.io/SCEGHiC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xuan Liang. Author, maintainer. Zhen Wang. Contributor, thesis advisor.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liang X (2025). SCEGHiC: Predicting Single-cell Enhancer Gene Interactions Integrating Prior Hi-C Information. R package version 0.0.0.9000, https://github.com/wuwei77lx/SCEGHiC.","code":"@Manual{,   title = {SCEGHiC: Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information},   author = {Xuan Liang},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/wuwei77lx/SCEGHiC}, }"},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information","text":"SCEG-HiC predicts interactions genes enhancers using multi-ome (paired scRNA-seq scATAC-seq scATAC-seq) sequencing data three-dimensional omics data (bulk average Hi-C). approach uses weighted graphical lasso (wglasso) model, taking average Hi-C data priori knowledge, predict cell specific interactions genes enhancers based correlation genes enhancers.","code":""},{"path":[]},{"path":"https://wuwei77lx.github.io/SCEGHiC/index.html","id":"required-software","dir":"","previous_headings":"Installation","what":"Required software","title":"Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information","text":"SCEG-HiC runs R statistical computing environment. need R version 4.1.0 higher, Bioconductor version 3.14 higher, Seurat 4.0 higher access latest features. install Bioconductor, open R run: Next, install Bioconductor dependencies aren’t automatically installed: Installation dependencies Install Signac pacakge : devtools::install_github(\"timoast/signac\", ref = \"develop\"). Please check encounter issue. Install Cicero package: devtools::install_github(\"cole-trapnell-lab/cicero-release\", ref = \"monocle3\"). Please check encounter issue. Now, can install development version SCEG-HiC GitHub : wish install CRAN SCEG-HiC, execute:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',                        'limma', 'lme4', 'S4Vectors', 'SingleCellExperiment',                        'SummarizedExperiment', 'batchelor', 'HDF5Array',                        'terra', 'ggrastr','Gviz', 'rtracklayer','GenomeInfoDb','GenomicRanges')) # install.packages(\"devtools\") devtools::install_github(\"wuwei77lx/SCEGHiC\") # Install released version from CRAN install.packages(\"SCEGHiC\")"},{"path":"https://wuwei77lx.github.io/SCEGHiC/index.html","id":"testing-the-installation","dir":"","previous_headings":"Installation","what":"Testing the installation","title":"Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information","text":"ensure SCEG-HiC installed correctly, start new R session run:","code":"library(SCEGHiC)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/index.html","id":"the-bulk-average-hi-c","dir":"","previous_headings":"","what":"The bulk average Hi-C","title":"Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information","text":"celltypes used human averaging : GM12878, NHEK, HMEC, RPE1, THP1, IMR90, HUVEC, HCT116, K562, KBM7. celltypes used mouse averaging : mESC1, mESC2, CH12LX, CH12F3, fiber, epithelium, B. Generate bulk average Hi-C using Activity Contact (ABC) model’s makeAverageHiC.py. Average Hi-C data can downloaded : human avg HiC file : https://www.encodeproject.org/files/ENCFF134PUN/@@download/ENCFF134PUN.bed.gz Extract human bulk average Hi-C using Activity Contact (ABC) model’s extract_avg_hic.py. mouse avg HiC file : 10.5281/zenodo.14849886","code":"python workflow/scripts/extract_avg_hic.py --avg_hic_bed_file ../ENCFF134PUN.bed.gz --output_dir ../"},{"path":"https://wuwei77lx.github.io/SCEGHiC/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information","text":"basic example shows solve common problem: Aggregated paired scRNA-seq scATAC-seq data   See documentation website information!","code":"library(SCEGHiC) library(Signac) ## basic example code data(multiomic_small)  # Preprocess data SCEGdata <- process_data(multiomic_small, k_neigh = 5, max_overlap = 0.5) #> Generating aggregated data #> Aggregating cluster 0 #> Sample cells randomly. #> have 11 samples #> Aggregating cluster 1 #> Sample cells randomly. #> have 11 samples  gene <- c(\"TRABD2A\", \"GNLY\", \"MFSD6\", \"CTLA4\", \"LCLAT1\", \"NCK2\", \"GALM\", \"TMSB10\", \"ID2\", \"CXCR4\") fpath <- system.file(\"extdata\", package = \"SCEGHiC\")  # Calculate weight weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = gene, averHicPath = fpath) #> Successfully obtained 10 TSS loci of genes from chromosome 2. #> Calculate weight of  TRABD2A #> Calculate weight of  GNLY #> Calculate weight of  MFSD6 #> Calculate weight of  CXCR4 #> Calculate weight of  CTLA4 #> Calculate weight of  LCLAT1 #> Calculate weight of  NCK2 #> Calculate weight of  ID2 #> Calculate weight of  GALM #> Calculate weight of  TMSB10  # Run model results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = gene) #> The predicted genes are 10 in total. #> Run model of  TRABD2A #> Run model of  GNLY #> Run model of  MFSD6 #> Run model of  CXCR4 #> Run model of  CTLA4 #> Run model of  LCLAT1 #> Run model of  NCK2 #> Run model of  ID2 #> Run model of  GALM #> Run model of  TMSB10  # Visualize the links connections_Plot(results_SCEGHiC, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"CTLA4\", cutoff = 0.01, gene_anno = NULL) # Coverage plot and visualize the links of CTLA4 fpath <- system.file(\"extdata\", \"multiomic_small_atac_fragments.tsv.gz\", package = \"SCEGHiC\") frags <- CreateFragmentObject(path = fpath, cells = colnames(multiomic_small)) #> Computing hash Fragments(multiomic_small) <- frags coverPlot(multiomic_small, focus_gene = \"CTLA4\", species = \"Homo sapiens\", genome = \"hg38\", assay = \"peaks\", SCEG_HiC_Result = results_SCEGHiC, SCEG_HiC_cutoff = 0.01) #> Warning in .merge_two_Seqinfo_objects(x, y): The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.) sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-conda-linux-gnu #> Running under: CentOS Linux 7 (Core) #>  #> Matrix products: default #> BLAS/LAPACK: /home/liangxuan/conda/envs/test/lib/libopenblasp-r0.3.28.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Asia/Shanghai #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.5.1                     BSgenome.Hsapiens.UCSC.hg38_1.4.5 #>  [3] BSgenome_1.74.0                   rtracklayer_1.66.0                #>  [5] BiocIO_1.16.0                     Biostrings_2.74.1                 #>  [7] XVector_0.46.0                    EnsDb.Hsapiens.v86_2.99.0         #>  [9] ensembldb_2.30.0                  AnnotationFilter_1.30.0           #> [11] GenomicFeatures_1.58.0            AnnotationDbi_1.68.0              #> [13] Biobase_2.66.0                    GenomicRanges_1.58.0              #> [15] GenomeInfoDb_1.42.1               IRanges_2.40.1                    #> [17] S4Vectors_0.44.0                  BiocGenerics_0.52.0               #> [19] Seurat_5.2.0                      SeuratObject_5.0.2                #> [21] sp_2.1-4                          Signac_1.14.9001                  #> [23] SCEGHiC_0.0.0.9000                #>  #> loaded via a namespace (and not attached): #>   [1] R.methodsS3_1.8.2           dichromat_2.0-0.1           #>   [3] progress_1.2.3              urlchecker_1.0.1            #>   [5] nnet_7.3-20                 goftest_1.2-3               #>   [7] vctrs_0.6.5                 spatstat.random_3.3-2       #>   [9] digest_0.6.37               png_0.1-8                   #>  [11] ggrepel_0.9.6               styler_1.10.3               #>  [13] deldir_2.0-4                parallelly_1.41.0           #>  [15] MASS_7.3-64                 reshape2_1.4.4              #>  [17] httpuv_1.6.15               withr_3.0.2                 #>  [19] xfun_0.50                   ellipsis_0.3.2              #>  [21] survival_3.8-3              memoise_2.0.1               #>  [23] commonmark_1.9.2            rcmdcheck_1.4.0             #>  [25] profvis_0.4.0               zoo_1.8-12                  #>  [27] pbapply_1.7-2               R.oo_1.27.0                 #>  [29] Formula_1.2-5               prettyunits_1.2.0           #>  [31] KEGGREST_1.46.0             promises_1.3.2              #>  [33] httr_1.4.7                  restfulr_0.0.15             #>  [35] globals_0.16.3              fitdistrplus_1.2-2          #>  [37] ps_1.8.1                    rstudioapi_0.17.1           #>  [39] UCSC.utils_1.2.0            miniUI_0.1.1.1              #>  [41] generics_0.1.3              base64enc_0.1-3             #>  [43] processx_3.8.5              curl_6.0.1                  #>  [45] zlibbioc_1.52.0             polyclip_1.10-7             #>  [47] GenomeInfoDbData_1.2.13     SparseArray_1.6.0           #>  [49] xopen_1.0.1                 xtable_1.8-4                #>  [51] stringr_1.5.1               desc_1.4.3                  #>  [53] evaluate_1.0.3              S4Arrays_1.6.0              #>  [55] BiocFileCache_2.14.0        hms_1.1.3                   #>  [57] irlba_2.3.5.1               colorspace_2.1-1            #>  [59] filelock_1.0.3              ROCR_1.0-11                 #>  [61] reticulate_1.40.0           spatstat.data_3.1-4         #>  [63] magrittr_2.0.3              lmtest_0.9-40               #>  [65] later_1.4.1                 lattice_0.22-6              #>  [67] spatstat.geom_3.3-4         future.apply_1.11.3         #>  [69] scattermore_1.2             XML_3.99-0.17               #>  [71] cowplot_1.1.3               matrixStats_1.5.0           #>  [73] RcppAnnoy_0.0.22            Hmisc_5.2-2                 #>  [75] pillar_1.10.1               nlme_3.1-166                #>  [77] cicero_1.3.9                compiler_4.4.2              #>  [79] RSpectra_0.16-2             stringi_1.8.4               #>  [81] tensor_1.5                  minqa_1.2.8                 #>  [83] SummarizedExperiment_1.36.0 devtools_2.4.5              #>  [85] GenomicAlignments_1.42.0    plyr_1.8.9                  #>  [87] crayon_1.5.3                abind_1.4-8                 #>  [89] bit_4.5.0.1                 dplyr_1.1.4                 #>  [91] fastmatch_1.1-6             NCmisc_1.2.0                #>  [93] codetools_0.2-20            monocle3_1.3.7              #>  [95] bslib_0.8.0                 slam_0.1-55                 #>  [97] biovizBase_1.54.0           plotly_4.10.4               #>  [99] mime_0.12                   splines_4.4.2               #> [101] Rcpp_1.0.14                 fastDummies_1.7.4           #> [103] dbplyr_2.5.0                interp_1.1-6                #> [105] knitr_1.49                  blob_1.2.4                  #> [107] lme4_1.1-36                 fs_1.6.5                    #> [109] listenv_0.9.1               checkmate_2.3.2             #> [111] Rdpack_2.6.2                pkgbuild_1.4.5              #> [113] Gviz_1.50.0                 tibble_3.2.1                #> [115] Matrix_1.6-5                callr_3.7.6                 #> [117] tweenr_2.0.3                pkgconfig_2.0.3             #> [119] tools_4.4.2                 cachem_1.1.0                #> [121] R.cache_0.16.0              rbibutils_2.3               #> [123] RSQLite_2.3.9               viridisLite_0.4.2           #> [125] DBI_1.2.3                   fastmap_1.2.0               #> [127] rmarkdown_2.29              scales_1.3.0                #> [129] grid_4.4.2                  usethis_3.1.0               #> [131] ica_1.0-3                   Rsamtools_2.22.0            #> [133] sass_0.4.9                  patchwork_1.3.0             #> [135] FNN_1.1.4.1                 dotCall64_1.2               #> [137] VariantAnnotation_1.52.0    RANN_2.6.2                  #> [139] rpart_4.1.24                farver_2.1.2                #> [141] reformulas_0.4.0            yaml_2.3.10                 #> [143] VGAM_1.1-12                 roxygen2_7.3.2              #> [145] latticeExtra_0.6-30         MatrixGenerics_1.18.1       #> [147] foreign_0.8-88              cli_3.6.3                   #> [149] purrr_1.0.2                 lifecycle_1.0.4             #> [151] uwot_0.2.2                  sessioninfo_1.2.2           #> [153] backports_1.5.0             BiocParallel_1.40.0         #> [155] gtable_0.3.6                rjson_0.2.23                #> [157] ggridges_0.5.6              progressr_0.15.1            #> [159] parallel_4.4.2              testthat_3.2.3              #> [161] jsonlite_1.8.9              RcppHNSW_0.6.0              #> [163] bitops_1.0-9                bit64_4.5.2                 #> [165] assertthat_0.2.1            brio_1.1.5                  #> [167] Rtsne_0.17                  glasso_1.11                 #> [169] spatstat.utils_3.1-2        jquerylib_0.1.4             #> [171] spatstat.univar_3.1-1       R.utils_2.12.3              #> [173] lazyeval_0.2.2              shiny_1.10.0                #> [175] htmltools_0.5.8.1           sctransform_0.4.1           #> [177] rappdirs_0.3.3              glue_1.8.0                  #> [179] spam_2.11-0                 httr2_1.0.7                 #> [181] RCurl_1.98-1.16             rprojroot_2.0.4             #> [183] jpeg_0.1-10                 gridExtra_2.3               #> [185] boot_1.3-31                 igraph_2.0.3                #> [187] R6_2.5.1                    tidyr_1.3.1                 #> [189] SingleCellExperiment_1.28.1 RcppRoll_0.3.1              #> [191] labeling_0.4.3              cluster_2.1.8               #> [193] pkgload_1.4.0               nloptr_2.1.1                #> [195] DelayedArray_0.32.0         tidyselect_1.2.1            #> [197] ProtGenerics_1.38.0         htmlTable_2.4.3             #> [199] ggforce_0.4.2               xml2_1.3.6                  #> [201] future_1.34.0               vdiffr_1.0.8                #> [203] munsell_0.5.1               KernSmooth_2.23-26          #> [205] data.table_1.16.4           htmlwidgets_1.6.4           #> [207] RColorBrewer_1.1-3          biomaRt_2.62.0              #> [209] rlang_1.1.4                 spatstat.sparse_3.1-0       #> [211] spatstat.explore_3.3-4      remotes_2.5.0               #> [213] reader_1.0.6"},{"path":"https://wuwei77lx.github.io/SCEGHiC/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information","text":"SCEG-HiC, can choose aggregate data use single-cell type data analysis. aggregate data: average data similar cells,used k-nearest neighbor method. single-cell type data: normalize single-cell type data. information package used real data, please check following links: SCEG-HiC paired scRNA-seq scATAC-seq data PBMC-aggregate SCEG-HiC paired scRNA-seq scATAC-seq data PBMC-CD4T SCEG-HiC paired scRNA-seq scATAC-seq data mouse skin-aggregate SCEG-HiC scATAC-seq data human COVID 19-Mono","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Predicting Single-cell Enhancer Gene Interactions by Integrating Prior Hi-C Information","text":"problems, comments suggestions, please contact us XuanLiang (liangxuan2022@sinh.ac.cn).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Aggregate_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Create aggregated data for SCEG-HiC — Aggregate_datasets","title":"Create aggregated data for SCEG-HiC — Aggregate_datasets","text":"Function generate aggregated inputs SCEG-HiC Aggregate_datasets.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Aggregate_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create aggregated data for SCEG-HiC — Aggregate_datasets","text":"","code":"Aggregate_datasets(   object,   k_neigh = 50,   rna_assay = \"RNA\",   atac_assay = \"peaks\",   cellnames = NULL,   atacbinary = TRUE,   max_overlap = 0.8,   reduction.name = NULL,   size_factor_normalize = TRUE,   seed = 123,   verbose = TRUE )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Aggregate_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create aggregated data for SCEG-HiC — Aggregate_datasets","text":"object Seurat object. k_neigh Number cells aggregated per group. rna_assay Name assay containing gene expression information. atac_assay Name assay containing peak information. cellnames Name one metadata columns group cells. Default current cell identities. atacbinary Logical,whether aggregated scATAC-seq data need binary? max_overlap maximum overlapping ratio two groups. reduction.name reduction name extracting cell coordinates used aggregating. size_factor_normalize Logical, accessibility values normalized size factor? seed Random seed. verbose Logical, warning info messages printed?","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Aggregate_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create aggregated data for SCEG-HiC — Aggregate_datasets","text":"Aggregated Seurat object.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/LinksPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot linked genomic elements — LinksPlot","title":"Plot linked genomic elements — LinksPlot","text":"Display links pairs genomic elements within given region genome.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/LinksPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot linked genomic elements — LinksPlot","text":"","code":"LinksPlot(links, geneanno, gene, region, lowcolor, highcolor, titlename)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/LinksPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot linked genomic elements — LinksPlot","text":"links result gene-peak pairs. geneanno Either NULL data.frame. data.frame form compatible Gviz function. GeneRegionTrack-class (NA column names). gene focused genes. region genomic region plot. lowcolor Colours low ends gradient. highcolor Colours high ends gradient. titlename title linking genomic elements.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/LinksPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot linked genomic elements — LinksPlot","text":"Returns ggplot object.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/LinksPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot linked genomic elements — LinksPlot","text":"","code":"links <- data.frame(   gene = \"CTLA4\", peak = c(\"chr2_203623664_203623982\", \"chr2_203730093_203731243\", \"chr2_203992800_203993979\"),   score = c(0.03623216, 0.14814205, 0.43240254) ) library(GenomicRanges) region <- GRanges(seqnames = Rle(\"chr2\"), ranges = IRanges(start = 203617771, end = 204117772)) geneanno <- annotateTSS(\"Homo sapiens\", \"hg38\") colnames(geneanno) <- c(\"chr\", \"gene\", \"tss\") links <- LinksPlot(links, geneanno, gene = \"CTLA4\", region, lowcolor = \"blue\", highcolor = \"orange\", titlename = \"SCEG-HiC\") links"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Run_SCEG_HiC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SCEG-HiC's model — Run_SCEG_HiC","title":"Run SCEG-HiC's model — Run_SCEG_HiC","text":"model uses data preprocessed SCEG-HiC, bulk average Hi-C penalty matrix, calculates partial correlation coefficient matrix elements using wglasso model, selects gene-peak.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Run_SCEG_HiC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SCEG-HiC's model — Run_SCEG_HiC","text":"","code":"Run_SCEG_HiC(   SCEGdata,   HiCWeights,   method = \"wglasso\",   focus_gene,   normalizeMethod = \"1\",   cutoff = NULL,   verbose = TRUE )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Run_SCEG_HiC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SCEG-HiC's model — Run_SCEG_HiC","text":"SCEGdata Preprocessed data SCEG-HiC. HiCWeights Raw bulk average Hi-C matrix.Run result code'calculateHiCWeights'. method method gene network reconstruction.Default wglasso. focus_gene focused genes. normalizeMethod method normalizing average Hi-C.Default \"1\". '1',rank score normalize average Hi-C. '2',min-max normalize average Hi-C. '3',0-1 normalize average Hi-C. '4',-log10 normalize average Hi-C. cutoff threshold gene-peak.Default NULL.\"aggregate\" TRUE ,recommend cutoff 0.01. \"aggregate\" FALSE ,recommend cutoff 0.001. verbose Logical, warning info messages printed?","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Run_SCEG_HiC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SCEG-HiC's model — Run_SCEG_HiC","text":"data.frame correlations gene-peak pair.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/Run_SCEG_HiC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run SCEG-HiC's model — Run_SCEG_HiC","text":"","code":"data(multiomic_small) SCEGdata <- process_data(multiomic_small, k_neigh = 5, max_overlap = 0.5) #> Generating aggregated data #> Aggregating cluster 0 #> Sample cells randomly. #> have 11 samples #> Aggregating cluster 1 #> Sample cells randomly. #> have 11 samples fpath <- system.file(\"extdata\", package = \"SCEGHiC\") gene <- c(\"TRABD2A\", \"GNLY\", \"MFSD6\", \"CTLA4\", \"LCLAT1\", \"NCK2\", \"GALM\", \"TMSB10\", \"ID2\", \"CXCR4\") weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = gene, averHicPath = fpath) #> Successfully obtained 10 TSS loci of genes from chromosome 2. #> Calculate weight of  TRABD2A #> Calculate weight of  GNLY #> Calculate weight of  MFSD6 #> Calculate weight of  CXCR4 #> Calculate weight of  CTLA4 #> Calculate weight of  LCLAT1 #> Calculate weight of  NCK2 #> Calculate weight of  ID2 #> Calculate weight of  GALM #> Calculate weight of  TMSB10 results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = gene) #> The predicted genes are 10 in total. #> Run model of  TRABD2A #> Run model of  GNLY #> Run model of  MFSD6 #> Run model of  CXCR4 #> Run model of  CTLA4 #> Run model of  LCLAT1 #> Run model of  NCK2 #> Run model of  ID2 #> Run model of  GALM #> Run model of  TMSB10 results_SCEGHiC[results_SCEGHiC$gene == \"CTLA4\", ] #>                           gene                     peak       score #> chr2_203623664_203623982 CTLA4 chr2_203623664_203623982  0.03623216 #> chr2_203730093_203731243 CTLA4 chr2_203730093_203731243  0.14814205 #> chr2_203786816_203787404 CTLA4 chr2_203786816_203787404  0.00000000 #> chr2_203932737_203935679 CTLA4 chr2_203932737_203935679 -0.10013637 #> chr2_203945543_203945939 CTLA4 chr2_203945543_203945939  0.00000000 #> chr2_203992800_203993979 CTLA4 chr2_203992800_203993979  0.43240254 #> chr2_204109915_204110871 CTLA4 chr2_204109915_204110871  0.00000000"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/annotateTSS.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate the provided Transcription Start Sites — annotateTSS","title":"Annotate the provided Transcription Start Sites — annotateTSS","text":"function annotates transcription start sites based species genome versions.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/annotateTSS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate the provided Transcription Start Sites — annotateTSS","text":"","code":"annotateTSS(species, genome)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/annotateTSS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate the provided Transcription Start Sites — annotateTSS","text":"species String, indicating name species.can either \"Homo sapiens\" \"Mus musculus\". genome String, indicating name genome assembly.can either \"hg38\", \"hg19\", \"mm10\", \"mm9\".","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/annotateTSS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate the provided Transcription Start Sites — annotateTSS","text":"data.frame gene TSS locus.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/annotateTSS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate the provided Transcription Start Sites — annotateTSS","text":"","code":"# TSS annotations for the hg38 tssdata <- annotateTSS(\"Homo sapiens\", \"hg38\") head(tssdata) #>    chr TargetGene TargetGeneTSS #> 1 chr1    DDX11L1         11874 #> 2 chr1     WASH7P         29370 #> 3 chr1  MIR6859-1         17436 #> 4 chr1  MIR6859-2         17436 #> 5 chr1  MIR6859-3         17436 #> 6 chr1  MIR6859-4         17436  # TSS annotations for the mm10 tssdata <- annotateTSS(\"Mus musculus\", \"mm10\") head(tssdata) #>     chr    TargetGene TargetGeneTSS #> 1 chr12        Zc3h14      98746968 #> 2 chr15         Troap      99074973 #> 3  chr3         Clca2     145099106 #> 4 chr16 1810013L24Rik       8830100 #> 5 chr17         Srsf7      80207305 #> 6 chr15        Fignl2     101054399"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/asSlamMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a sparseMatrix from Matrix package to a slam matrix — asSlamMatrix","title":"Convert a sparseMatrix from Matrix package to a slam matrix — asSlamMatrix","text":"Convert sparseMatrix Matrix package slam matrix","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/asSlamMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a sparseMatrix from Matrix package to a slam matrix — asSlamMatrix","text":"","code":"asSlamMatrix(sp_mat)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/asSlamMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a sparseMatrix from Matrix package to a slam matrix — asSlamMatrix","text":"sp_mat matrix aggregated single cell data.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/calculateHiCWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate promoters, enhancers, and Hi-C matrix of genes — calculateHiCWeights","title":"Calculate promoters, enhancers, and Hi-C matrix of genes — calculateHiCWeights","text":"function obtains enhancers promoters gene, calculates bulk average Hi-C matrix contact gene enhancers.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/calculateHiCWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate promoters, enhancers, and Hi-C matrix of genes — calculateHiCWeights","text":"","code":"calculateHiCWeights(   SCEGdata,   species,   genome,   focus_gene,   averHicPath,   TSSwindow = 1000,   upstream = 250000,   downstream = 250000,   verbose = TRUE )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/calculateHiCWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate promoters, enhancers, and Hi-C matrix of genes — calculateHiCWeights","text":"SCEGdata Preprocessed data SCEG-HiC. species String, indicating name species.can either \"Homo sapiens\"\"Mus musculus\". genome String, indicating name genome assembly.can either \"hg38\", \"hg19\", \"mm10\", \"mm9\". focus_gene focused genes. averHicPath Path bulk average Hi-C. TSSwindow Numeric specifying window size (base pairs) pad around either side TSS, fetch gene's promoters. Default 1000 bp (2000 bp window drawn around TSS). upstream Numeric specifying window size (base pairs) pad around upstream TSS, fetch gene's enhancers. Default 250 kb (500 kb window drawn around TSS). downstream Numeric specifying window size (base pairs) pad around downstream TSS, fetch gene's enhancers. Default 250 kb (500 kb window drawn around TSS). verbose Logical, warning info messages printed?","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/calculateHiCWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate promoters, enhancers, and Hi-C matrix of genes — calculateHiCWeights","text":"list enhancers, promoters, Hi-C matrices focus_gene.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/calculateHiCWeights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate promoters, enhancers, and Hi-C matrix of genes — calculateHiCWeights","text":"","code":"data(multiomic_small) SCEGdata <- process_data(multiomic_small, k_neigh = 5, max_overlap = 0.5) #> Generating aggregated data #> Aggregating cluster 0 #> Sample cells randomly. #> have 11 samples #> Aggregating cluster 1 #> Sample cells randomly. #> have 11 samples fpath <- system.file(\"extdata\", package = \"SCEGHiC\") gene <- c(\"TRABD2A\", \"GNLY\", \"MFSD6\", \"CTLA4\", \"LCLAT1\", \"NCK2\", \"GALM\", \"TMSB10\", \"ID2\", \"CXCR4\") weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = gene, averHicPath = fpath) #> Successfully obtained 10 TSS loci of genes from chromosome 2. #> Calculate weight of  TRABD2A #> Calculate weight of  GNLY #> Calculate weight of  MFSD6 #> Calculate weight of  CXCR4 #> Calculate weight of  CTLA4 #> Calculate weight of  LCLAT1 #> Calculate weight of  NCK2 #> Calculate weight of  ID2 #> Calculate weight of  GALM #> Calculate weight of  TMSB10 weight[[\"CTLA4\"]]$promoters #> character(0) weight[[\"CTLA4\"]]$enhancers #> [1] \"chr2_203623664_203623982\" \"chr2_203682042_203682957\" #> [3] \"chr2_203730093_203731243\" \"chr2_203786816_203787404\" #> [5] \"chr2_203830381_203830563\" \"chr2_203932737_203935679\" #> [7] \"chr2_203945543_203945939\" \"chr2_203992800_203993979\" #> [9] \"chr2_204109915_204110871\" head(weight[[\"CTLA4\"]]$contact) #>    element1                 element2        score #>      <char>                   <char>        <num> #> 1:    CTLA4 chr2_203623664_203623982 0.0010420455 #> 2:    CTLA4 chr2_203682042_203682957 0.0009676338 #> 3:    CTLA4 chr2_203730093_203731243 0.0008481914 #> 4:    CTLA4 chr2_203786816_203787404 0.0014686981 #> 5:    CTLA4 chr2_203830381_203830563 0.0030630646 #> 6:    CTLA4 chr2_203932737_203935679 0.0020004300"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/connections_Plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot links of SCEG-HiC on focused genes — connections_Plot","title":"Plot links of SCEG-HiC on focused genes — connections_Plot","text":"Plot links SCEG-HiC focused genes","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/connections_Plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot links of SCEG-HiC on focused genes — connections_Plot","text":"","code":"connections_Plot(   SCEG_HiC_Result,   species,   genome,   focus_gene,   cutoff = NULL,   upstream = 250000,   downstream = 250000,   gene_anno = NULL )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/connections_Plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot links of SCEG-HiC on focused genes — connections_Plot","text":"SCEG_HiC_Result SCEG-HiC result. species String, indicating name species.can either \"Homo sapiens\" \"Mus musculus\". genome String, indicating name genome assembly.can either \"hg38\", \"hg19\", \"mm10\", \"mm9\". focus_gene focused gene. cutoff threshold gene-peak.Default NULL.\"aggregate\" TRUE ,recommend cutoff 0.01. \"aggregate\" FALSE ,recommend cutoff 0.001. upstream Numeric specifying window size (base pairs) pad around upstream TSS, fetch gene's enhancers. Default 250 kb (500 kb window drawn around TSS). downstream Numeric specifying window size (base pairs) pad around downstream TSS, fetch gene's enhancers. Default 250 kb (500 kb window drawn around TSS). gene_anno Either NULL data.frame. data.frame form compatible Gviz function. GeneRegionTrack-class (NA column names).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/connections_Plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot links of SCEG-HiC on focused genes — connections_Plot","text":"gene region gene-peak pairs plot.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/connections_Plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot links of SCEG-HiC on focused genes — connections_Plot","text":"","code":"#' data(multiomic_small) SCEGdata <- process_data(multiomic_small, k_neigh = 5, max_overlap = 0.5) #> Generating aggregated data #> Aggregating cluster 0 #> Sample cells randomly. #> have 11 samples #> Aggregating cluster 1 #> Sample cells randomly. #> have 11 samples fpath <- system.file(\"extdata\", package = \"SCEGHiC\") gene <- c(\"TRABD2A\", \"GNLY\", \"MFSD6\", \"CTLA4\", \"LCLAT1\", \"NCK2\", \"GALM\", \"TMSB10\", \"ID2\", \"CXCR4\") weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = gene, averHicPath = fpath) #> Successfully obtained 10 TSS loci of genes from chromosome 2. #> Calculate weight of  TRABD2A #> Calculate weight of  GNLY #> Calculate weight of  MFSD6 #> Calculate weight of  CXCR4 #> Calculate weight of  CTLA4 #> Calculate weight of  LCLAT1 #> Calculate weight of  NCK2 #> Calculate weight of  ID2 #> Calculate weight of  GALM #> Calculate weight of  TMSB10 results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = gene) #> The predicted genes are 10 in total. #> Run model of  TRABD2A #> Run model of  GNLY #> Run model of  MFSD6 #> Run model of  CXCR4 #> Run model of  CTLA4 #> Run model of  LCLAT1 #> Run model of  NCK2 #> Run model of  ID2 #> Run model of  GALM #> Run model of  TMSB10 connections_Plot(results_SCEGHiC, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = \"CTLA4\", cutoff = 0.01, gene_anno = NULL)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/coverPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot links of SCEG-HiC on focused genes and Tn5 insertion frequency over a region — coverPlot","title":"Plot links of SCEG-HiC on focused genes and Tn5 insertion frequency over a region — coverPlot","text":"Plot frequency Tn5 insertion events different groups cells within given regions genome.  plot links gene-peak  predicted SCEG-HiC within given regions genome.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/coverPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot links of SCEG-HiC on focused genes and Tn5 insertion frequency over a region — coverPlot","text":"","code":"coverPlot(   object,   focus_gene,   species,   genome,   assay = NULL,   upstream = 250000,   downstream = 250000,   HIC_Result = NULL,   HIC_cutoff = 0,   SCEG_HiC_Result = NULL,   SCEG_HiC_cutoff = 0,   correlation = NULL,   cells = NULL,   cellnames = NULL )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/coverPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot links of SCEG-HiC on focused genes and Tn5 insertion frequency over a region — coverPlot","text":"object Seurat object. focus_gene focused gene. species String indicating name species.can either \"Homo sapiens\" \"Mus musculus\". genome String indicating name genome assembly.can either \"hg38\", \"hg19\", \"mm10\", \"mm9\". assay Name assay plot. list assays provided,  data assay shown overlaid track. first assay list define assay used gene annotations, links, peaks (shown). order assays given defines plotting order. upstream Numeric specifying window size (base pairs) pad around upstream TSS, fetch gene's enhancers. Default 250 kb (500 kb window drawn around TSS). downstream Numeric specifying window size (base pairs) pad around downstream TSS, fetch gene's enhancers. Default 250 kb (500 kb window drawn around TSS). HIC_Result Hi-C result. HIC_cutoff threshold gene-peak validated Hi-C.Default 0. SCEG_HiC_Result SCEG-HiC result. SCEG_HiC_cutoff threshold gene-peak predicted SCEG-HiC.Default 0.\"aggregate\" TRUE ,recommend cutoff 0.01. \"aggregate\" FALSE ,recommend cutoff 0.001. correlation Correlation elements result. cells cells plot. Default cells. cellnames Name one metadata columns group  cells. Default current cell identities.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/coverPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot links of SCEG-HiC on focused genes and Tn5 insertion frequency over a region — coverPlot","text":"Returns patchwork object.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/coverPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot links of SCEG-HiC on focused genes and Tn5 insertion frequency over a region — coverPlot","text":"Additional information can layered coverage plot setting several different options CoveragePlot function. includes showing: gene annotations peak positions gene-peak results predicted correlation gene-peak results validated Hi-C","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/coverPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot links of SCEG-HiC on focused genes and Tn5 insertion frequency over a region — coverPlot","text":"","code":"data(multiomic_small) SCEGdata <- process_data(multiomic_small, k_neigh = 5, max_overlap = 0.5) #> Generating aggregated data #> Aggregating cluster 0 #> Sample cells randomly. #> have 11 samples #> Aggregating cluster 1 #> Sample cells randomly. #> have 11 samples fpath <- system.file(\"extdata\", package = \"SCEGHiC\") gene <- c(\"TRABD2A\", \"GNLY\", \"MFSD6\", \"CTLA4\", \"LCLAT1\", \"NCK2\", \"GALM\", \"TMSB10\", \"ID2\", \"CXCR4\") weight <- calculateHiCWeights(SCEGdata, species = \"Homo sapiens\", genome = \"hg38\", focus_gene = gene, averHicPath = fpath) #> Successfully obtained 10 TSS loci of genes from chromosome 2. #> Calculate weight of  TRABD2A #> Calculate weight of  GNLY #> Calculate weight of  MFSD6 #> Calculate weight of  CXCR4 #> Calculate weight of  CTLA4 #> Calculate weight of  LCLAT1 #> Calculate weight of  NCK2 #> Calculate weight of  ID2 #> Calculate weight of  GALM #> Calculate weight of  TMSB10 results_SCEGHiC <- Run_SCEG_HiC(SCEGdata, weight, focus_gene = gene) #> The predicted genes are 10 in total. #> Run model of  TRABD2A #> Run model of  GNLY #> Run model of  MFSD6 #> Run model of  CXCR4 #> Run model of  CTLA4 #> Run model of  LCLAT1 #> Run model of  NCK2 #> Run model of  ID2 #> Run model of  GALM #> Run model of  TMSB10 fpath <- system.file(\"extdata\", \"multiomic_small_atac_fragments.tsv.gz\", package = \"SCEGHiC\") library(Signac) frags <- CreateFragmentObject(path = fpath, cells = colnames(multiomic_small)) #> Computing hash Fragments(multiomic_small) <- frags coverPlot(multiomic_small, focus_gene = \"CTLA4\", species = \"Homo sapiens\", genome = \"hg38\", assay = \"peaks\", SCEG_HiC_Result = results_SCEGHiC, SCEG_HiC_cutoff = 0.01) #> Warning: The 2 combined objects have no sequence levels in common. (Use #>   suppressWarnings() to suppress this warning.)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/dmode.html","id":null,"dir":"Reference","previous_headings":"","what":"use gaussian kernel to calculate the mode of transcript counts — dmode","title":"use gaussian kernel to calculate the mode of transcript counts — dmode","text":"use gaussian kernel calculate mode transcript counts","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/dmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use gaussian kernel to calculate the mode of transcript counts — dmode","text":"","code":"dmode(x, breaks = \"Sturges\")"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/dmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use gaussian kernel to calculate the mode of transcript counts — dmode","text":"x Log tranformed relative expression breaks Control parameter","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForDenseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate size factors dense matrix — estimateSizeFactorsForDenseMatrix","title":"Estimate size factors dense matrix — estimateSizeFactorsForDenseMatrix","text":"Estimate size factors dense matrix","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForDenseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate size factors dense matrix — estimateSizeFactorsForDenseMatrix","text":"","code":"estimateSizeFactorsForDenseMatrix(   counts,   locfunc = median,   round_exprs = TRUE,   method = \"mean-geometric-mean-total\" )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForDenseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate size factors dense matrix — estimateSizeFactorsForDenseMatrix","text":"counts matrix gene expression data, either read counts FPKM values transcript counts. locfunc location function used find representive value. round_exprs logic flag determine whether expression value rounded. method character specify size factor calculation appraoches. can either \"mean-geometric-mean-total\" (default), \"weighted-median\", \"median-geometric-mean\", \"median\", \"mode\", \"geometric-mean-total\".","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate the size factor for the single-cell data — estimateSizeFactorsForMatrix","title":"Function to calculate the size factor for the single-cell data — estimateSizeFactorsForMatrix","text":"Function calculate size factor single-cell data","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate the size factor for the single-cell data — estimateSizeFactorsForMatrix","text":"","code":"estimateSizeFactorsForMatrix(   counts,   locfunc = median,   round_exprs = TRUE,   method = \"mean-geometric-mean-total\" )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate the size factor for the single-cell data — estimateSizeFactorsForMatrix","text":"counts matrix gene expression data, either read counts FPKM values transcript counts. locfunc location function used find representive value. round_exprs logic flag determine whether expression value rounded. method character specify size factor calculation appraoches. can either \"mean-geometric-mean-total\" (default), \"weighted-median\", \"median-geometric-mean\", \"median\", \"mode\", \"geometric-mean-total\".","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForSparseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate size factors for each column, given a sparseMatrix from the Matrix package — estimateSizeFactorsForSparseMatrix","title":"Estimate size factors for each column, given a sparseMatrix from the Matrix package — estimateSizeFactorsForSparseMatrix","text":"Estimate size factors column, given sparseMatrix Matrix package","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForSparseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate size factors for each column, given a sparseMatrix from the Matrix package — estimateSizeFactorsForSparseMatrix","text":"","code":"estimateSizeFactorsForSparseMatrix(   counts,   locfunc = median,   round_exprs = TRUE,   method = \"mean-geometric-mean-total\" )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimateSizeFactorsForSparseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate size factors for each column, given a sparseMatrix from the Matrix package — estimateSizeFactorsForSparseMatrix","text":"counts matrix gene expression data, either read counts FPKM values transcript counts. locfunc location function used find representive value. round_exprs logic flag determine whether expression value rounded. method character specify size factor calculation appraoches. can either \"mean-geometric-mean-total\" (default), \"weighted-median\", \"median-geometric-mean\", \"median\", \"mode\", \"geometric-mean-total\".","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimate_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the most commonly occuring relative expression value in each cell — estimate_t","title":"Find the most commonly occuring relative expression value in each cell — estimate_t","text":"Converting relative expression values mRNA copies per cell requires knowing commonly occuring relative expression value cell. value typically corresponds RPC value 1. function finds commonly occuring (log-transformed) relative expression value column provided expression matrix.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimate_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the most commonly occuring relative expression value in each cell — estimate_t","text":"","code":"estimate_t(relative_expr_matrix, relative_expr_thresh = 0.1)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimate_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the most commonly occuring relative expression value in each cell — estimate_t","text":"relative_expr_matrix matrix relative expression values values row column representing genes/isoforms cells, respectively. Row column names included. Expression values log-transformed. relative_expr_thresh Relative expression values threshold considered zero.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimate_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the most commonly occuring relative expression value in each cell — estimate_t","text":"vector abundant relative_expr value corresponding RPC 1.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimate_t.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the most commonly occuring relative expression value in each cell — estimate_t","text":"function estimates abundant relative expression value (t^) using gaussian kernel density function. can also optionally output t^ based two gaussian mixture model based smsn.mixture mixsmsn package.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/estimate_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the most commonly occuring relative expression value in each cell — estimate_t","text":"","code":"if (FALSE) { # \\dontrun{ HSMM_fpkm_matrix <- exprs(HSMM) t_estimate <- estimate_t(HSMM_fpkm_matrix) } # }"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/generate_aggregated_datastes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create aggregated data for a certain cluster — generate_aggregated_datastes","title":"Create aggregated data for a certain cluster — generate_aggregated_datastes","text":"Function generate aggregated inputs cetrain cluster. generate_aggregated_datastes takes input sparse data. function aggregate binary accessibility scores (gene expression) per cell cluster, overlap existing group 50% cells.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/generate_aggregated_datastes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create aggregated data for a certain cluster — generate_aggregated_datastes","text":"","code":"generate_aggregated_datastes(   object,   cell_coord,   rna_assay = \"RNA\",   atac_assay = \"peaks\",   k_neigh = 50,   atacbinary = TRUE,   max_overlap = 0.8,   seed = 123,   verbose = TRUE )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/generate_aggregated_datastes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create aggregated data for a certain cluster — generate_aggregated_datastes","text":"object Seurat object. cell_coord Similarity matrix dimiension reductions. rna_assay Name assay containing gene expression information. atac_assay Name assay containing peak information. k_neigh Number cells aggregate per group. atacbinary Logical, whether aggregated scATAC-seq data need binary. max_overlap maximum overlapping ratio two groups. seed Random seed. verbose Logical, warning info messages printed?","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/generate_aggregated_datastes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create aggregated data for a certain cluster — generate_aggregated_datastes","text":"Aggregated data.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg19TSSdata.html","id":null,"dir":"Reference","previous_headings":"","what":"hg19TSSdata — hg19TSSdata","title":"hg19TSSdata — hg19TSSdata","text":"Transcription start site (TSS) data human genome (hg19).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg19TSSdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hg19TSSdata — hg19TSSdata","text":"","code":"hg19TSSdata"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg19TSSdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"hg19TSSdata — hg19TSSdata","text":"data frame 43327 rows 3 variables: chr Chromosome name (e.g., \"chr1\"). TargetGene Gene name associated TSS. TargetGeneTSS Position TSS.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg19TSSdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"hg19TSSdata — hg19TSSdata","text":"UCSC RefGene database (https://hgdownload2.soe.ucsc.edu/goldenPath/hg19/bigZips/genes/hg19.refGene.gtf.gz).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg19TSSdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"hg19TSSdata — hg19TSSdata","text":"dataset contains transcription start site annotations hg19 human genome assembly.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg19TSSdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hg19TSSdata — hg19TSSdata","text":"","code":"data(hg19TSSdata) head(hg19TSSdata) #>     chr   TargetGene TargetGeneTSS #> 1  chr1 LOC102725121         11869 #> 2  chr1      DDX11L1         11874 #> 3 chr22      SPECC1L      24666799 #> 4  chr1    MIR6859-1         17436 #> 5  chr1    MIR6859-2         17436 #> 6  chr1    MIR6859-3         17436"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg38TSSdata.html","id":null,"dir":"Reference","previous_headings":"","what":"hg38TSSdata — hg38TSSdata","title":"hg38TSSdata — hg38TSSdata","text":"Transcription start site (TSS) data human genome (hg38).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg38TSSdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hg38TSSdata — hg38TSSdata","text":"","code":"hg38TSSdata"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg38TSSdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"hg38TSSdata — hg38TSSdata","text":"data frame 47982 rows 3 variables: chr Chromosome name (e.g., \"chr1\"). TargetGene Gene name associated TSS. TargetGeneTSS Position TSS.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg38TSSdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"hg38TSSdata — hg38TSSdata","text":"UCSC RefGene database (https://hgdownload2.soe.ucsc.edu/goldenPath/hg38/bigZips/genes/hg38.refGene.gtf.gz).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg38TSSdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"hg38TSSdata — hg38TSSdata","text":"dataset contains transcription start site annotations hg38 human genome assembly.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/hg38TSSdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hg38TSSdata — hg38TSSdata","text":"","code":"data(hg38TSSdata) head(hg38TSSdata) #>    chr TargetGene TargetGeneTSS #> 1 chr1    DDX11L1         11874 #> 2 chr1     WASH7P         29370 #> 3 chr1  MIR6859-1         17436 #> 4 chr1  MIR6859-2         17436 #> 5 chr1  MIR6859-3         17436 #> 6 chr1  MIR6859-4         17436"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/isSparseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a sparseMatrix from Matrix package to a slam matrix — isSparseMatrix","title":"Convert a sparseMatrix from Matrix package to a slam matrix — isSparseMatrix","text":"Convert sparseMatrix Matrix package slam matrix","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/isSparseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a sparseMatrix from Matrix package to a slam matrix — isSparseMatrix","text":"","code":"isSparseMatrix(x)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/isSparseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a sparseMatrix from Matrix package to a slam matrix — isSparseMatrix","text":"x sparseMatrix data.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/liftOverPeaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Peaks corresponding genome version conversion — liftOverPeaks","title":"Peaks corresponding genome version conversion — liftOverPeaks","text":"function convert genomic coordinates based provided peaks.SCEGHIC provides bulk average Hi-C genome versions hg19 mm10, require genome coordinate conversion hg38 mm10.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/liftOverPeaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peaks corresponding genome version conversion — liftOverPeaks","text":"","code":"liftOverPeaks(split_peaks, genome)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/liftOverPeaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peaks corresponding genome version conversion — liftOverPeaks","text":"split_peaks Peaks genome coordinate conversion. genome String indicating name genome assembly.can either \"hg38\" \"mm9\".","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/liftOverPeaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peaks corresponding genome version conversion — liftOverPeaks","text":"data.frame peaks genome coordinate conversion.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/liftOverPeaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peaks corresponding genome version conversion — liftOverPeaks","text":"","code":"peaks <- c(   \"chr2-973888-974755\", \"chr2-3195868-3196264\", \"chr2-3242398-3243508\", \"chr2-6863856-6866834\", \"chr2-6913141-6914394\",   \"chr2-6924663-6924972\", \"chr2-6999095-6999554\", \"chr2-7007713-7008819\", \"chr2-7083945-7084032\", \"chr2-7097148-7098029\" ) split_peaks <- do.call(\"rbind\", strsplit(as.character(peaks), \"-\", fixed = TRUE)) peakinfo <- liftOverPeaks(split_peaks, \"hg38\") head(peakinfo) #>    chr   start     end                 peak  midpoint #> 1 chr2  969574  970441   chr2_973888_974755  970007.5 #> 2 chr2 3199639 3200035 chr2_3195868_3196264 3199837.0 #> 3 chr2 3246169 3247279 chr2_3242398_3243508 3246724.0 #> 4 chr2 7003987 7006965 chr2_6863856_6866834 7005476.0 #> 5 chr2 7053272 7054525 chr2_6913141_6914394 7053898.5 #> 6 chr2 7064794 7065103 chr2_6924663_6924972 7064948.5"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm10TSSdata.html","id":null,"dir":"Reference","previous_headings":"","what":"mm10TSSdata — mm10TSSdata","title":"mm10TSSdata — mm10TSSdata","text":"Transcription start site (TSS) data mouse genome (mm10).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm10TSSdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mm10TSSdata — mm10TSSdata","text":"","code":"mm10TSSdata"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm10TSSdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mm10TSSdata — mm10TSSdata","text":"data frame 31599 rows 3 variables: chr Chromosome name (e.g., \"chr1\"). TargetGene Gene name associated TSS. TargetGeneTSS Position TSS.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm10TSSdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"mm10TSSdata — mm10TSSdata","text":"UCSC RefGene database (https://hgdownload2.soe.ucsc.edu/goldenPath/mm10/bigZips/genes/mm10.refGene.gtf.gz).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm10TSSdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mm10TSSdata — mm10TSSdata","text":"dataset contains transcription start site annotations mm10 mouse genome assembly.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm10TSSdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mm10TSSdata — mm10TSSdata","text":"","code":"data(mm10TSSdata) head(mm10TSSdata) #>     chr    TargetGene TargetGeneTSS #> 1 chr12        Zc3h14      98746968 #> 2 chr15         Troap      99074973 #> 3  chr3         Clca2     145099106 #> 4 chr16 1810013L24Rik       8830100 #> 5 chr17         Srsf7      80207305 #> 6 chr15        Fignl2     101054399"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm9TSSdata.html","id":null,"dir":"Reference","previous_headings":"","what":"mm9TSSdata — mm9TSSdata","title":"mm9TSSdata — mm9TSSdata","text":"Transcription start site (TSS) data mouse genome (mm9).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm9TSSdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mm9TSSdata — mm9TSSdata","text":"","code":"mm9TSSdata"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm9TSSdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mm9TSSdata — mm9TSSdata","text":"data frame 31479 rows 3 variables: chr Chromosome name (e.g., \"chr1\"). TargetGene Gene name associated TSS. TargetGeneTSS Position TSS.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm9TSSdata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"mm9TSSdata — mm9TSSdata","text":"UCSC RefGene database (https://hgdownload2.soe.ucsc.edu/goldenPath/mm9/bigZips/genes/mm9.refGene.gtf.gz).","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm9TSSdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mm9TSSdata — mm9TSSdata","text":"dataset contains transcription start site annotations mm9 mouse genome assembly.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/mm9TSSdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mm9TSSdata — mm9TSSdata","text":"","code":"data(mm9TSSdata) head(mm9TSSdata) #>     chr TargetGene TargetGeneTSS #> 1 chr15     Rbfox2      77137483 #> 2  chr2      Hipk3     104334646 #> 3  chr2     Pfkfb3      11423717 #> 4  chr2       Gpd2      57090089 #> 5  chr6       Emp1     135317511 #> 6 chr10     Arid3a      79389788"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/multiomic_small.html","id":null,"dir":"Reference","previous_headings":"","what":"A small example paired scRNA-seq and scATAC-seq data. — multiomic_small","title":"A small example paired scRNA-seq and scATAC-seq data. — multiomic_small","text":"subsetted version 10x Genomics 10k human (hg38) PBMC paired scRNA-seq scATAC-seq dataset","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/multiomic_small.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A small example paired scRNA-seq and scATAC-seq data. — multiomic_small","text":"","code":"multiomic_small"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/multiomic_small.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A small example paired scRNA-seq and scATAC-seq data. — multiomic_small","text":"Seurat object following assays RNA gene x cell dataset peaks peak x cell dataset","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/multiomic_small.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A small example paired scRNA-seq and scATAC-seq data. — multiomic_small","text":"https://support.10xgenomics.com/single-cell-multiome-atac-gex/datasets/1.0.0/pbmc_granulocyte_sorted_10k","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/normalizeHiCWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"The bulk average Hi-C matrix normalization — normalizeHiCWeights","title":"The bulk average Hi-C matrix normalization — normalizeHiCWeights","text":"bulk average Hi-C matrix normalization","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/normalizeHiCWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The bulk average Hi-C matrix normalization — normalizeHiCWeights","text":"","code":"normalizeHiCWeights(hicweight, normalizeMethod = \"1\", element)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/normalizeHiCWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The bulk average Hi-C matrix normalization — normalizeHiCWeights","text":"hicweight Raw bulk average Hi-C matrix. normalizeMethod method normalizing average Hi-C.Default \"1\". \"1\", rank score normalize average Hi-C. \"2\", min-max normalize average Hi-C. \"3\", 0-1 normalize average Hi-C. \"4\", -log10 normalize average Hi-C. element row col elements average Hi-C matrix.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/normalizeHiCWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The bulk average Hi-C matrix normalization — normalizeHiCWeights","text":"matrix normalizing average Hi-C.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/normalizeHiCWeights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The bulk average Hi-C matrix normalization — normalizeHiCWeights","text":"","code":"hicweight <- data.frame(   element1 = c(     \"CHN1\", \"CHN1\", \"CHN1\", \"CHN1\", \"CHN1\", \"chr2_174901074_174901475\", \"chr2_174901074_174901475\",     \"chr2_174901074_174901475\", \"chr2_174901074_174901475\", \"chr2_174990102_174990619\", \"chr2_174990102_174990619\",     \"chr2_174990102_174990619\", \"chr2_175048293_175048704\", \"chr2_175048293_175048704\", \"chr2_175167038_175169195\"   ),   element2 = c(     \"chr2_174901074_174901475\", \"chr2_174990102_174990619\", \"chr2_175048293_175048704\", \"chr2_175167038_175169195\",     \"chr2_175187467_175187717\", \"chr2_174990102_174990619\", \"chr2_175048293_175048704\", \"chr2_175167038_175169195\",     \"chr2_175187467_175187717\", \"chr2_175048293_175048704\", \"chr2_175167038_175169195\", \"chr2_175187467_175187717\",     \"chr2_175167038_175169195\", \"chr2_175187467_175187717\", \"chr2_175187467_175187717\"   ),   score = c(     0.0016062358, 0.0076253167, 0.0031021570, 0.0012148262, 0.0010788392, 0.0019968580, 0.0012957845,     0.0009198567, 0.0011448870, 0.0023991885, 0.0010785481, 0.0009664508, 0.0012865316, 0.0012122647, 0.0057781939   ) ) element <- unique(c(hicweight$element1, hicweight$element2)) weight <- normalizeHiCWeights(hicweight, \"1\", element) head(weight) #>                               CHN1 chr2_174901074_174901475 #> CHN1                     1.0000000                0.3571429 #> chr2_174901074_174901475 0.3571429                1.0000000 #> chr2_174990102_174990619 0.0000000                0.2857143 #> chr2_175048293_175048704 0.1428571                0.4285714 #> chr2_175167038_175169195 0.5714286                1.0000000 #> chr2_175187467_175187717 0.7857143                0.7142857 #>                          chr2_174990102_174990619 chr2_175048293_175048704 #> CHN1                                    0.0000000                0.1428571 #> chr2_174901074_174901475                0.2857143                0.4285714 #> chr2_174990102_174990619                1.0000000                0.2142857 #> chr2_175048293_175048704                0.2142857                1.0000000 #> chr2_175167038_175169195                0.8571429                0.5000000 #> chr2_175187467_175187717                0.9285714                0.6428571 #>                          chr2_175167038_175169195 chr2_175187467_175187717 #> CHN1                                   0.57142857               0.78571429 #> chr2_174901074_174901475               1.00000000               0.71428571 #> chr2_174990102_174990619               0.85714286               0.92857143 #> chr2_175048293_175048704               0.50000000               0.64285714 #> chr2_175167038_175169195               1.00000000               0.07142857 #> chr2_175187467_175187717               0.07142857               1.00000000"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/process_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SCEG-HiC preprocessed input data — process_data","title":"Create SCEG-HiC preprocessed input data — process_data","text":"Function create preprocessed input data SCEG-HiC.calculateHiCWeights Run_SCEG_HiCtakes input generated data.function can generate clustered data non clustered data specific cell type.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/process_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SCEG-HiC preprocessed input data — process_data","text":"","code":"process_data(   object,   aggregate = TRUE,   celltype = NULL,   rna_assay = \"RNA\",   atac_assay = \"peaks\",   cellnames = NULL,   atacbinary = TRUE,   k_neigh = 50,   max_overlap = 0.8,   size_factor_normalize = TRUE,   reduction.name = NULL,   seed = 123,   verbose = TRUE )"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/process_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SCEG-HiC preprocessed input data — process_data","text":"object Seurat object. aggregate Logically,  data clustered ?FALSE, celltype must specified one cell type. celltype cells generate data. rna_assay Name assay containing gene expression information.aggregate TRUE, name assay containing raw gene expression information.aggregate FALSE, name assay containing normalize gene expression information. atac_assay Name assay containing peak information.aggregate TRUE, name assay containing raw peak information. aggregate FALSE, name assay containing normalize peak information. cellnames Name one metadata columns group cells . Default current cell identities. atacbinary Logical, whether aggregated scATAC-seq data need binary? k_neigh Number cells aggregated per group. max_overlap maximum overlapping ratio two groups. size_factor_normalize Logical, accessibility values normalized size factor? reduction.name reduction name extracting cell coordinates used aggregating. seed Random seed. verbose Logical, warning info messages printed?","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/process_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SCEG-HiC preprocessed input data — process_data","text":"Preprocessed data SCEG-HiC","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/process_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create SCEG-HiC preprocessed input data — process_data","text":"","code":"data(multiomic_small) # aggregated with paired scRNA-seq and scATAC-seq data SCEGdata <- process_data(multiomic_small, k_neigh = 5, max_overlap = 0.5) #> Generating aggregated data #> Aggregating cluster 0 #> Sample cells randomly. #> have 11 samples #> Aggregating cluster 1 #> Sample cells randomly. #> have 11 samples  # select \"1\" cells with paired scRNA-seq and scATAC-seq data SCEGdata <- process_data(multiomic_small, aggregate = FALSE, celltype = \"1\")"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/wglasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene network reconstruction by integration of priori biological knowledge — wglasso","title":"Gene network reconstruction by integration of priori biological knowledge — wglasso","text":"method, instead using single penalty, different penalty values applied element pairs based priori knowledge whether two element connected. priori information can calculated retrieved biological data, e.g., bulk average Hi-C matrix.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/wglasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene network reconstruction by integration of priori biological knowledge — wglasso","text":"","code":"wglasso(S, sample, normhicMatrix, element)"},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/wglasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene network reconstruction by integration of priori biological knowledge — wglasso","text":"S Covariance matrix:p p matrix (symmetric) sample number samples. normhicMatrix matrix normalizing average Hi-C. element row col elements average Hi-C matrix.","code":""},{"path":"https://wuwei77lx.github.io/SCEGHiC/reference/wglasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene network reconstruction by integration of priori biological knowledge — wglasso","text":"matrix partial correlation coefficients elements.","code":""}]
